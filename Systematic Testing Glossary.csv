Name,Approach Category,Definition,Parent(s),Synonym(s),Notes
A/B Testing,"Practice (IEEE, 2022, p. 22)","Testing ""that allows testers to determine which of two systems or components performs better"" (IEEE, 2022, p.1)","Statistical Testing (IEEE, 2022, pp. 1, 35)","Split-Run Testing (IEEE, 2022, pp.1, 35)","""Not a test case generation technique as test inputs are not generated""; ""us[es] the existing system as a partial oracle"" (IEEE, 2022, p. 36)"
Acceptance Testing,"Level (IEEE, 2022, pp. 12, 21-22, 26-27; Washizaki, 2024, p. 5-7)","""Testing conducted to enable a user, customer, or other authorized entity to determine whether to accept a system or component"" and whether it ""satisfies its acceptance criteria"" (IEEE, 2017, p. 5)","System Testing (van Vliet, 2000, p. 439)",,"""May or may not involve the developers of the system"" (Bourque and Fairley, 2014, p. 4-6). Related to usability testing (van Vliet, 2000, p. 439) and validation tests (IEEE, 2017, p. 5)"
Acceptance Tests,Approach,"Tests ""of a system or functional unit usually performed by the purchaser … with the … vendor to ensure that the contractual requirements are met"" (IEEE, 2017, p. 5)",,"Qualification Testing (Bourque and Fairley, 2014, p. 4-6)","Difference between this and acceptance testing? Related to validation tests (IEEE, 2017, p. 5)"
Accessibility Testing,"Type (IEEE, 2022, pp. 1, 22)","Testing ""used to measure the degree to which a test item can be operated by users with the widest possible range of characteristics and abilities"" (IEEE, 2022, p. 1; 2013, p. 2)","Usability Testing (IEEE, 2022, p.1) (although listed separately on p. 22)",,"Good to use when the software will be widely available or when it will be used by people with disabilities (IEEE, 2022, p. 45)"
Ad Hoc Testing,"Technique (Washizaki, 2024, p. 5-14)","Testing where ""test cases are derived by relying on the software engineer’s skill, intuition, and experience with similar programs"" to ""identify[] test cases that are not easily generated by more formalized techniques"" (Washizaki, 2024, p. 5-14)","Experience-based Testing (Washizaki, 2024, p. 5-14)",,
Adaptive Random Testing,"Technique (Washizaki, 2024, p. 5-12)","Random testing ""in which other input selection criteria direct the random input sampling"" (Washizaki, 2024, p. 5-12)","Random Testing (Washizaki, 2024, p. 5-12)",,Kind of a vague definition; what are these criteria?
All Combinations Testing,"Technique (Washizaki, 2024, p. 5-11; IEEE, 2022, p. 22)","Testing that ""focuses on all … the possible input combinations"" (Washizaki, 2024, p. 5-11)","Combinatorial Testing (Washizaki, 2024, p. 5-11; IEEE, 2022, p. 22)",,
All-C-Uses Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)","Testing that aims to execute all ""use[s] of the value of a variable in any type of statement"" (IEEE, 2017, p. 83; OG IEEE, 2015) as ""defined in [a given] data definition""? (IEEE, 2017, p. 115; OG IEEE, 2015)","Data Flow Testing (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)","All Computation Data Uses (implied by IEEE, 2017, p. 83)","See also van Vliet (2000, pp. 424-425)"
All-Definitions Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)","Testing that aims to execute all ""statement[s] where a variable is assigned a value""? (IEEE, 2017, p. 115; OG IEEE, 2015)","Data Flow Testing (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)",,"A ""weaker strateg[y]"" than all-DU-paths testing (Washizaki, 2024, p. 5-13). See also van Vliet (2000, pp. 424-425)"
All-DU-Paths Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)","Testing that ""requires executing, for each variable, every control flow path segment from a definition of that variable to the use of that definition"" (Washizaki, 2024, p. 5-13), or that aims to execute all ""predicate or computational data use[s that] … use[] the value defined in [a given] data definition""? (IEEE, 2017, p. 125; OG IEEE, 2015)","Data Flow Testing (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)",,"""The strongest data flow testing criterion"" (Washizaki, 2024, p. 5-13). See also van Vliet (2000, pp. 424-425)"
All-P-Uses Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)","Testing that aims to execute all ""predicate data use[s that] … use[] the value defined in [a given] data definition""? (IEEE, 2017, p. 115; OG IEEE, 2015)","Data Flow Testing (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)",,"See also van Vliet (2000, pp. 424-425)"
All-Uses Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)",,"Data Flow Testing (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)",,"A ""weaker strateg[y]"" than all-DU-paths testing (Washizaki, 2024, p. 5-13). See also van Vliet (2000, pp. 424-425)"
Alpha Testing,"Level (IEEE, 2022, p. 22)","The ""first stage of testing before a product is considered ready for commercial or operational use"" (IEEE, 2017, p. 17)","Acceptance Testing (IEEE, 2022, p. 22); Unscripted Testing (Washizaki, 2024, p. 5-8)",,"""Often performed only by users within the organization developing the software"" (IEEE, 2017, p. 17) or ""a small, selected group of potential users"" (Washizaki, 2024, p. 5-8). Related to beta testing (IEEE, 2017, p. 17; Washizaki, 2024, p. 5-8)"
API Testing,Approach,"A specific form of interface testing that ""simulate[s] the use of APIs by end-user applications"", including ""generating parameters"" and ""defining internal data"" (Washizaki, 2024, p. 5-10)","Interface Testing (Washizaki, 2024, p. 5-10)","Application Program Interface Testing (Washizaki, 2024, p. 5-10)",
Attacks,"Practice (IEEE, 2022, p. 34)","Testing with the goal of ""exploiting a specific … way of thinking about how and why software fails … [which] can be behaviour-based"" (IEEE, 2022, p. 34)","Experience-based Testing (IEEE, 2022, p. 34)",,"""An example of a security attack would be to block access to software libraries"" (IEEE, 2022, p. 34). This term can also be defined as a ""malicious action or interaction with the system or its environment that has the potential to result in a fault or an error, and thereby possibly in a failure, or an adverse consequence"" (IEEE, 2019, p. 7) which is essentially the same definition with the modification of being ""malicious""; like the difference between white- and black-hat hacking"
Audits,Practice?,"""Examination[s] of … work products to assess compliance with specifications, standards, contractual agreements, or other criteria"" (IEEE, 2017, p. 36) ""often mandated to be performed by third parties to ensure independence"" (Washizaki, 2024, p. 12-14)","Static Analysis? (Washizaki, 2024, p. 12-13), Static Testing, Compliance Testing (implied by IEEE, 2022, p. 44)",,"Also described as testing ""used to verify compliance with standards"" (IEEE, 2022, p. 44). See also ISO 24765; couldn't find original source: ISO/IEC TS 24748-1:2016"
Automated Testing,"Practice (IEEE, 2022, pp. 20, 22)","Testing ""executed by a test automation tool"" (IEEE, 2022, p. 35)","Scripted Testing (IEEE, 2022, p. 33)",,"Often cost-effective ""if a set of test cases is going to be executed 5 or more times"" (IEEE, 2022, p. 35) but ""must be automated as much as possible throughout the entire software delivery process, including throughout development and operations"", and at all levels (Washizaki, 2024, p. 6-13). See also ""automated verification system "" (IEEE, 2017, p. 37)"
Back-to-Back Testing,"Practice (IEEE, 2022, p. 22)","Testing ""whereby an alternative version of the system is used to generate expected results for comparison from the same test inputs"" (IEEE, 2022, p.2) or where ""two or more variants of a program are executed with the same inputs, the outputs are compared, and errors are analyzed in case of discrepancies"" (IEEE, 2017, p. 38)","Non-functional Testing (Washizaki, 2024, p. 5-9)","Differential Testing (IEEE, 2022, p.2)","""Not a test case generation technique as test inputs are not generated"" (IEEE, 2022, p. 35). Similar to testing using a pseudo-oracle (Barr et al., 2015, p. 515) and related to mutation testing (IEEE, 2017, p. 38)"
Backup and Recovery Testing,Type (inferred from reliability testing),"Testing ""that measures the degree to which system state can be restored from backup within specified parameters of time, cost, completeness, and accuracy in the event of failure"" (IEEE, 2013, p. 2)","Reliability Testing (IEEE, 2013, p. 2); Performance Testing?",,"Nonatomic; captures both ""backup"" and ""recovery"". Seems to be what is meant by ""recovery testing"" in the context of performance"
"Backup Testing (implied by Washizaki, 2024, p. 6-8)",,,,,"""Should be constantly rehearsed as changes to the production environment are made"" (Washizaki, 2024, p. 6-8)"
Base Choice Testing,"Technique (IEEE, 2022, p. 22)",,"Combinatorial Testing (IEEE, 2022, p. 22)",,
Beta Testing,"Level (IEEE, 2022, p. 22)","The ""second stage of testing when a product is in limited production use"" (IEEE, 2017, p. 17)","Acceptance Testing (IEEE, 2022, p. 22); Unscripted Testing (Washizaki, 2024, p. 5-8)",,"""Often performed at a customer site"" (IEEE, 2017, p. 45) by ""a larger set of representative users"" (Washizaki, 2024, p. 5-8); related to alpha testing (Washizaki, 2024, p. 5-8)"
Big-Bang Testing,Level (inferred from integration testing),"""Testing in which … [components of a system] are combined all at once into an overall system, rather than in stages"" (IEEE, 2017, p. 45)","Integration Testing (Washizaki, 2024, p. 5-7; IEEE, 2017, p. 45)",,
Bottom-Up Testing,Level (inferred from integration testing),"Integration testing (Washizaki, 2024, p. 5-7) that ""starts with the lowest‐level components … and proceeds through progressively higher‐levels"" (IEEE, 2017, p. 49; OG ISO/IEC 2015)","Integration Testing (Washizaki, 2024, p. 5-7)",,
Boundary Value Analysis,"Technique (Washizaki, 2024, p. 5-11; IEEE, 2022, pp. 2, 20, 22)","Testing ""based on exercising the boundaries of equivalence partitions"" (IEEE, 2022, p.2) (i.e., ""minimum or maximum input[s], internal [values], or output value[s] specified for a system or component"" (IEEE, 2017, p. 49))","Specification-based Testing (Washizaki, 2024, p. 5-11; IEEE, 2022, pp. 2, 22), Equivalence Partitioning (IEEE, 2022, p. 2), Functional Testing? (IEEE, 2022, p. 20)",,"Seems to be related to stress testing (IEEE, 2017, p. 49); See also Patton, 2006, pp. 70-74"
Branch Condition Combination Testing,"Technique (IEEE, 2022, p. 22)",,"Structure-based Testing (IEEE, 2022, p. 22)","(Multiple) Condition Testing? (Patton, 2006, p. 120), Extended Branch Coverage? (van Vliet, 2000, p. 422)",Difference between this and branch condition testing?
Branch Condition Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)",,"Control Flow Testing (Washizaki, 2024, p. 5-13), Structure-based Testing (IEEE, 2022, p. 22)","(Multiple) Condition Testing? (Patton, 2006, p. 120), Extended Branch Coverage? (van Vliet, 2000, p. 422)",Difference between this and branch condition combination testing?
Branch Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, pp. 2, 22)","Testing ""based on exercising branches [or ""execut[ing] each outcome of each decision point"" (IEEE, 2017, p. 51)] in the control flow of the test item"" (IEEE, 2022, p. 2)","Control Flow Testing (Washizaki, 2024, p. 5-13), Structure-based Testing (IEEE, 2022, pp. 2, 22)",,"IEEE (2017, p. 51) says it is ""designed to execute each outcome of each decision point""; is this level of coverage required or advised?"
Buddy Testing,"Technique (Washizaki, 2024, p. 5-14)","Testing that ""generates test cases by using internal architecture knowledge and testing specific knowledge"" (Washizaki, 2024, p. 5-14); this definition seems vague","Ad Hoc Testing (Washizaki, 2024, p. 5-14)",,Related to pair testing?
Business Process Testing,"Technique (Washizaki, 2024, p. 5-12)","Scenario-based testing focused ""on the roles in a workflow specification"" (Washizaki, 2024, p. 5-12)","Scenario-based Testing (Washizaki, 2024, p. 5-12)",,
Canary (Release) Testing,"Technique (Washizaki, 2024, p. 6-5)","""A partial and time-limited deployment of a change in a service and an evaluation of that change"" to help ""decide whether to proceed with a complete deployment"" (Washizaki, 2024, p. 6-10)",,"Referred to as both ""canary testing"" (Washizaki, 2024, p. 6-5) and ""canary release testing"" (Washizaki, 2024, p. 6-10)","A method for ""testing the software in the production system context"" which ""can be particularly challenging"" (Washizaki, 2024, p. 6-5)"
Capacity Testing,"Type (IEEE, 2022, p. 22; IEEE, 2013, p. 2)","""Testing conducted to evaluate the level at which increasing load (of users, transactions, data storage, etc.) compromises a test item’s ability to sustain required performance"" (IEEE, 2013, p. 2)","Performance Testing (Washizaki, 2024, p. 5-9); Performance-related Testing (IEEE, 2022, p. 22); Performance Efficiency Testing (IEEE, 2013, p. 2)",,"Has the following subcategories from IEEE (2017): channel capacity (p. 67), memory capacity (p. 270), storage capacity (p. 441)"
Capture-Replay Driven Testing,"Practice (IEEE, 2022, p. 22)",,"Automated Testing (IEEE, 2022, pp. 22, 35)",,
Cause-Effect Graphing,"Technique (Washizaki, 2024, p. 5-11; IEEE, 2022, pp. 2, 22)","Testing ""based on exercising decision rules in a cause-effect graph"" (IEEE, 2022, p. 2): a ""logical network[] that map[s] a set of causes to a set of effects by systematically exploring the possible combinations of input conditions"" (Washizaki, 2024, p. 5-11)","Specification-based Testing (Washizaki, 2024, p. 5-11; IEEE, 2022, p. 22)",,"Related to decision table testing (Washizaki, 2024, p. 5-11)"
Certification,Approach,"The ""process of confirming that a system or component complies with its specified requirements and is acceptable for operational use"" (IEEE, 2017, p. 63); usually done by a third-party (IEEE, 2017, p. 63; OG ISO/IEC 2015)",,,
Checklist-based Testing,"Practice (IEEE, 2022, p. 34)","Testing generated ""based on a list of pre-determined items"" that ""can be based on personal experience, commonly found defects, and perceived risks"" (IEEE, 2022, p. 34)","Experience-based Testing (IEEE, 2022, p. 34)","Checklist Analysis? (IEEE, 2017, p. 67)","""Often focused on a particular quality characteristic"" (IEEE, 2022, p. 34). See also Patton, 2006, pp. 61, 99-103"
Classification Tree Method,"Technique (IEEE, 2022, p. 22)",,"Specification-based Testing (IEEE, 2022, p. 22)",,
Code Inspections,"Technique (IEEE, 2017, p. 227)","""Visual examination[s] of … [code] to detect and identify software anomalies, including errors and deviations from standards and specifications"" (IEEE, 2017, p. 227; OG IEEE, 2008) that are ""peer examinations led by impartial facilitators who are trained in inspection techniques"" (IEEE, 2017, p. 227)","Static Analysis (IEEE, 2017, p. 227), Static Testing? (IEEE, 2017, p. 227)",,
Code Reviews,Approach,"A ""meeting at which software code is presented to project personnel, managers, users, customers, or other interested parties for comment or approval"" (IEEE, 2017, p. 74); can also be done ""using a pull request technique/tool … before [the code] can be merged into [the] project"" (Washizaki, 2024, p. 12-13)","Reviews (Washizaki, 2024, p. 12-13), Peer Reviews (sometimes) (Washizaki, 2024, p. 12-13), Static Analysis? (Washizaki, 2024, p. 12-13)",,"Sometimes kept separate from testing (Washizaki, 2024, p. 12-11). Seems to line up most closely with the notion of ""peer review"" from Patton (2006, p. 94) and van Vliet (2000, p. 414)"
Co-existence Testing,Type (inferred from compatibility and interoperability testing),"""Testing that measures the degree to which a test item can function satisfactorily alongside other independent products in a shared environment"" (IEEE, 2022, p. 3)","Compatibility Testing (IEEE, 2022, p. 3)",,"Not present in (IEEE, 2022); definition of ""coexistence"" also given in (International Software Testing Qualifications Board, 2022); see also ISO/IEC, 2023"
Combinatorial Testing,"Technique (Washizaki, 2024, p. 5-11; IEEE, 2022, pp. 3, 22)","Testing that ""systematically derive[s] … test cases that cover specific parameters of values or conditions"" (Washizaki, 2024, p. 5-11)","Specification-based Testing (Washizaki, 2024, p. 5-11; IEEE, 2022, pp. 3, 22)","Combinatorial Test Design Techniques (IEEE, 2022, p. 3) (a little redundant)","See also Engström and Petersen, 2015"
Compatibility Testing,"Type (IEEE, 2022, pp. 3, 22; 2013, p. 2)","""Testing that measures the degree to which a test item can function satisfactorily alongside other independent products in a shared environment (co-existence), and where necessary, exchanges information with other systems or components (interoperability)"" (IEEE, 2022, p. 3; 2013, p. 2)","Non-functional Testing (Washizaki, 2024, p. 5-9)",,"Not atomic; implies the existence of ""co-existence testing"" and ""interoperability testing"". Includes both ""different hardware and software facilities"" and ""different versions or releases"" (Washizaki, 2024, p. 5-9). Likely has two subtypes: ""downward compatibility testing"" (implied by IEEE, 2017, p. 147) and ""upward compatibility testing"" (implied by IEEE, 2017, p. 492)"
Compliance Testing,"Type (IEEE (2017, p. 82) implies that ""compliance"" is a software quality)","Testing used ""to demonstrate the SUT’s adherence to a law or regulation"" usually ""forced by an external regulatory body"" (Washizaki, 2024, p. 5-8)",,,"""Audits are often used to verify compliance with standards"" (IEEE, 2022, p. 44)"
Component Integration Testing,Level (inferred from component testing and integration testing),"""Testing of groups of related components"" (IEEE, 2017, p. 82)",,,"Difference between this, integration testing, and unit testing?"
Configuration Testing,Approach,"Testing that ""verifies the software under specified configurations"" (Washizaki, 2024, p. 5-10), or ""arrangement[s] … defined by … its constituent parts[,] … requirements, design, and[/or] implementation"" (IEEE, 2017, p. 90), when it ""is built to serve different users"" (Washizaki, 2024, p. 5-10)",,,"Can be done by an audit (IEEE, 2017, p. 90)"
Construction Testing,Approach,"Testing that ""aims to reduce the gap between when faults are inserted into the code and when those faults are detected, thereby reducing the cost incurred to fix them"" (Washizaki, 2024, p. 4-7)",,,"""Involves two forms of testing, which are often performed by the software engineer who wrote the code: unit testing and integration testing"", but not ""more specialized testing"" (Washizaki, 2024, p. 4-7). IEEE (2017, p. 95) defines a process just called ""construction"" that includes unit testing (but not integration testing). See also IEEE Standard 829-1998 and IEEE Standard 1008-1987"
Continuous Testing,"Practice (Washizaki, 2024, p. 6-13)","Testing ""started via an automated process that can occur on-demand"" (IEEE, 2022, p. 35) ""that involves testing the software at every stage of the software development life cycle"" (Washizaki, 2024, p. 6-13)","Automated Testing (IEEE, 2022, p. 35)",,"""Allow[s] early testing"" (IEEE, 2022, p. 35) and should be done ""early and often"" (Washizaki, 2024, p. 6-13) and ideally imploy ""prioritization"", the process of ""defin[ing] a test execution order according to some criteria"" (Washizaki, 2024, p. 5-4), so that time isn't wasted on lower priority tests"
Control Flow Testing,"Technique (Washizaki, 2024, p. 5-13)","Testing that ""covers all"" of a particular subdivision of code (Washizaki, 2024, p. 5-13), namely the ""sequence in which operations are performed during … execution"" (IEEE, 2017, p. 101; OG IEEE, 2015)","Structure-based Testing (Washizaki, 2024, p. 5-13)",,"""The adequacy of such tests is measured in percentages"" and can also be performed on ""blocks of statements[] or specific combinations of statements"" (Washizaki, 2024, p. 5-13); would these be a different testing type? Related to data flow testing? (IEEE, 2017, p. 101)"
Conversion Testing,"Type (IEEE, 2022, p. 22)","Testing that verifies that the software can be modified ""to enable it to operate with similar functional capability in a different environment"" (IEEE, 2017, p. 103)",Portability Testing?,,
Dark Launches,"Technique (Washizaki, 2024, p. 6-5)",,,,"A method for ""testing the software in the production system context"" which ""can be particularly challenging"" (Washizaki, 2024, p. 6-5)"
Data Flow Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)","Control flow testing with additional ""information about how the variables are defined, used, and killed"" (Washizaki, 2024, p. 5-13)","Structure-based Testing (IEEE, 2022, p. 22), Control Flow Testing? (Washizaki, 2024, p. 5-13)",,"May involve ""data analysis"": the ""systematic investigation of the data and their flow in a real or planned system"" (IEEE, 2017, p. 114). Related to control flow testing? (IEEE, 2017, p. 101). See also IEEE (2017, p. 166), Patton (2006, p. 114) and van Vliet (2000, pp. 424-425)"
Data-driven Testing,"Practice (IEEE, 2022, p. 22)",,"Automated Testing (IEEE, 2022, pp. 22, 35)",,
Decision Table Testing,"Technique (Washizaki, 2024, p. 5-11; IEEE, 2022, pp. 4, 22)","Testing ""based on exercising decision rules in a decision table"" (IEEE, 2022, p. 4) ""by considering every possible combination of conditions and their corresponding resultant actions"" (Washizaki, 2024, p. 5-11)","Specification-based Testing (Washizaki, 2024, p. 5-11; IEEE, 2022, pp. 4, 22), Model-based Testing (Bourque and Fairley, 2014, p. 4-10)",,"Decision Table: ""tabular representation of decision rules between causes and effects"" (IEEE, 2022, p. 3) or of ""sets of conditions and the actions resulting from them"" (IEEE, 2017, p. 123). Related to cause-effect graphing (Washizaki, 2024, p. 5-11). See also Peters and Pedrycz (2000, pp. 448, 450-453)"
Decision Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, pp. 4, 22)","Testing ""based on exercising decision outcomes in the control flow of the test item"" (IEEE, 2022, p.4)","Control Flow Testing (Washizaki, 2024, p. 5-13), Structure-based Testing (IEEE, 2022, pp. 4, 22)","Condition Testing (Washizaki, 2024, p. 5-13)",
Desk Checking,"Technique (IEEE, 2017, p. 133)","A ""manual simulation of program execution"" or visual examination of code listings, test results, or other documentation to ""detect faults"" and "" identify errors"" (IEEE, 2017, p. 133; OG ISO/IEC 2015)",,,"Related to inspections and walkthroughs (IEEE, 2017, p. 133)"
Deterministic Testing?,"Technique? (implied by Washizaki, 2024, p. 5-16)",,,,"In contrast to random testing; it is unclear if this is an actual test approach or simply a method for selecting input data, etc. for tests (Washizaki, 2024, p. 5-16)"
Development Testing,Level?,"""Testing conducted during the development of a system or component, usually in the development environment by the developer … to establish whether … [it] satisfies its criteria"" (IEEE, 2017, p. 136)",,,"The secondary definition, ""testing conducted to establish whether a new software product or software‐based system (or components of it) satisfies its criteria"" (IEEE, 2017, p. 136), seems to overlap with acceptance testing"
"Disaster/Recovery Testing (or Disaster Recovery Testing (implied by Washizaki, 2024, p. 6-8))","Type (IEEE, 2022, p. 22)","Testing to determine the degree to which a system can ""return to normal operation after a hardware or software failure "" (IEEE, 2017, p. 140)",,,"""Requires stopping the service, identifying the checkpoint state and triggering the failover process""; ""should be constantly rehearsed as changes to the production environment are made"" (Washizaki, 2024, p. 6-8). Difference between this and recovery testing (in the context of performance)?"
Dynamic Testing,Approach,"""Testing in which a test item is evaluated by executing it"" (IEEE, 2022, p. 4)",,,"Can ""only occur in the parts of the life cycle when executable code is available"" (IEEE, 2022, p. 18)"
Each Choice Testing,"Technique (IEEE, 2022, p. 22)",,"Combinatorial Testing (IEEE, 2022, p. 22)",,
Elasticity Testing,Approach,"Testing that ""assesses the ability of the SUT … to rapidly expand or shrink compute, memory, and storage resources without compromising the capacity to meet peak utilization"" (Washizaki, 2024, p. 5-9)","Non-functional Testing (Washizaki, 2024, p. 5-9)",,"Some objectives are ""to control behaviors, to identify the resources to be (un)allocated, to coordinate events in parallel, and to evaluate scalability"" (Washizaki, 2024, p. 5-9); the last one seems like it should be under scalability testing?"
Endurance Testing,"Type (IEEE, 2013, p. 2)","""Testing conducted to evaluate whether a test item can sustain a required load continuously for a specified period of time"" (IEEE, 2013, p. 2)","Performance Efficiency Testing (IEEE, 2013, p. 2)",,
Equivalence Partitioning,"Technique (Washizaki, 2024, p. 5-11; IEEE, 2022, pp. 4, 20, 22; 2013, p. 3)","Testing ""designed to exercise equivalence partitions by using one or more representative members of each partition"" (IEEE, 2022, p. 4; 2013, p. 3) ""based on a specified criterion or relation"" to create ""a representative test suite"" (Washizaki, 2024, p. 5-11)","Specification-based Testing (Washizaki, 2024, p. 5-11; IEEE, 2022, p. 22), Functional Testing? (IEEE, 2022, p. 20)","Equivalence Classing (although this sometimes has a bit different of a definition; see IEEE, 2017, p. 164) (Patton, 2006, p. 67; implied in IEEE, 2022, p. 4)",
Error Guessing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, pp. 4, 22, 34; 2013, p. 3)","Testing based on ""the tester's knowledge of past failures, or general knowledge of failure modes"" (IEEE, 2022, p. 4; 2013, p. 3) ""to anticipate the most plausible faults in each SUT"" (Washizaki, 2024, p. 5-13)","Experience-based Testing (Washizaki, 2024, p. 5-13; IEEE, 2022, pp. 4, 22), Fault-based Testing (Bourque and Fairley, 2014, p. 4-9)",,"See also Patton, 2006, pp. 88-89"
Error Seeding,Practice?,"The ""process of intentionally adding known faults to those already in a computer program … [to] estimat[e] the number of faults remaining"" (IEEE, 2017, p. 165)",,"Fault Seeding (IEEE, 2017, p. 165; van Vliet, 2000, p. 427), Bug Seeding (IEEE, 2017, p. 165)","See also van Vliet (2000, pp. 427-428)"
Evidence-based Testing,"Technique (Washizaki, 2024, p. 5-12)","Testing that ""follows a rigorous research approach"", including ""identifying"" and ""critically analyzing the evidence in light of the problem"" (Washizaki, 2024, p. 5-12)","Specification-based Testing (Washizaki, 2024, p. 5-12)",,"""Evidence-based software engineering (EBSE) … is the _best_ solution for a practical problem"" (Washizaki, 2024, p. 5-12); related to experience-based testing?"
Exhaustive Testing ,"Approach (IEEE, 2022, p. 4)","Testing ""in which all combinations of input values and preconditions are tested"" (IEEE, 2022, p. 4)","Dynamic Testing (IEEE, 2022, p. 18)",,"Impossible in most non-trivial situations (Washizaki, 2024, p. 5-5; IEEE, 2022, p. 4; van Vliet, 2000, p. 421; Peters and Pedrycz, 2000, pp. 439, 461)"
Experience-based Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, pp. 4, 22), Practice (IEEE, 2022, p. 22)","Testing ""using the experience [and intuition (Washizaki, 2024, p. 5-13)] of testers to generate test cases"" (IEEE, 2022, p. 4), as well as the SUT's context (Washizaki, 2024, p. 5-13)","Dynamic Testing (IEEE, 2022, p. 17), Unscripted Testing (often) (IEEE, 2022, p. 34)",,"""Can include concepts such as test attacks, tours, and error taxonomies"" (IEEE, 2022, p. 4). See also Patton, 2006, pp. 88-89"
Exploratory Testing,"Technique (Washizaki, 2024, p. 5-14; inferred from experience-based testing: IEEE, 2022, pp. 4-5; 2013, p. 3), Practice (IEEE, 2022, pp. 20, 22, 34)","""Simultaneous learning, test design and test execution"" (Washizaki, 2024, p. 5-14) that is ""spontaneous"" and aims to find ""hidden properties"" that ""can interfere with other properties of the software under test"" (IEEE, 2022, p. 5; 2013, p. 3)","Experience-based Testing (Washizaki, 2024, p. 5-14; IEEE, 2022, p. 5; 2013, p. 3); Unscripted Testing (IEEE, 2022, p. 33; 2017, p. 174; implied by Washizaki, 2024, p. 5-14)",,"""Test cases are not defined in advance but are dynamically designed, executed, and modified according to the collected evidence"" (Washizaki, 2024, p. 5-14), but this process is often structured with ""session sheets"", which are also ""used to capture information about what was tested, and any anomalous behaviour observed"" (2022, p. 33). Patton says this is used when a specification is not available to determine and test the software's features (2006, p. 65). ""Widely used in shift-left development (such as Agile)"" (Washizaki, 2024, p. 5-14). See also Whittaker, 2010"
Extended Entry Table Testing,Technique (inferred from decision table testing),"Testing ""based on exercising decision rules"" (IEEE, 2022, p. 4) in an extended entry table: a ""decision table where the conditions and actions are generally described but are incomplete"" (IEEE, 2017, p. 175; OG ISO, 1984)","Decision Table Testing (IEEE, 2017, p. 175; OG ISO, 1984)",,"Decision Table: ""tabular representation of decision rules between causes and effects"" (IEEE, 2022, p. 3) or of ""sets of conditions and the actions resulting from them"" (IEEE, 2017, p. 123)"
Factory Acceptance Testing,"Level (IEEE, 2022, p. 22)",,"Acceptance Testing (IEEE, 2022, p. 22)",,
Failover Testing,Approach,"Testing that ""validates the SUT’s ability to manage heavy loads or unexpected failure to continue typical operations"" (Washizaki, 2024, p. 5-9)","Non-functional Testing (Washizaki, 2024, p. 5-9)",,"Can be done by ""allocating extra resources"" (Washizaki, 2024, p. 5-9) and ""should be constantly rehearsed as changes to the production environment are made"" (Washizaki, 2024, p. 6-8). Related to recoverability validation (Washizaki, 2024, p. 5-9)"
"Fault Injection Testing (IEEE, 2022, p. 42)",Approach,,,,"Can ""test the robustness of the system in the event of internal and external failures"" (IEEE, 2022, p. 42)"
Fault-Based Testing,"Technique (Washizaki, 2024, p. 5-14)","Testing that ""devise[s] test cases specifically to reveal likely or predefined fault categories"" (Washizaki, 2024, p. 5-14)",,,
Forcing Exception Testing,"Technique (Washizaki, 2024, p. 5-12)","Testing that ""check[s] whether the SUT can manage a predefined set of exceptions/errors"" (Washizaki, 2024, p. 5-12)","Scenario-based Testing? (Washizaki, 2024, p. 5-13)",,"Related to the ""test-to-fail"" approach (Patton, 2006, pp. 66-67)"
Formal Reviews,Approach,,"Reviews (Washizaki, 2024, p. 12-14)",,
Formal Testing,Approach,"""Testing conducted in accordance with test plans and procedures that have been reviewed and approved"" (IEEE, 2017, p. 188)",,,"Since informal testing still follows ""test plans and procedures"" (IEEE, 2017, p. 220), this is probably not related to scripted testing (at least specifically)"
Functional Suitability Testing,Approach?,"Testing to determine the ""capability of a product to provide functions that meet stated and implied needs of intended users when it is used under specified conditions"" (ISO/IEC, 2023)",,,"This includes meeting ""the functional specification"" (ISO/IEC, 2023). Difference between this and functional testing?"
Functional Testing,"Type (IEEE, 2022, pp. 15, 20, 22); ""correctness"" is a quality (IEEE, 2017, p. 104; Washizaki, 2024, p. 3-13) which is what defines a ""test type"" (IEEE, 2022, p. 15)","Testing ""used to check the implementation of functional requirements"" (IEEE, 2022, p. 21) and ""to verify that the SUT conforms to standards, rules, specifications, requirements, design, processes, or practices"" (Washizaki, 2024, p. 5-7)",,"Conformance Testing, Correctness Testing (Washizaki, 2024, p. 5-7)",
Functional Testing,"Design (Inferred from ""Black-Box Testing"")","""Testing that … focuses solely on the outputs generated in response to selected inputs and execution conditions"" or that ""evaluate[s] the compliance of a system or component with specified functional requirements"" (IEEE, 2017, p. 196) which ""identif[y] what results"" (IEEE, 2017, p. 195) or ""observable behaviours that the software is to provide (Washizaki, 2024, p. 1-4)",,"Black-Box Testing (IEEE, 2017, p. 196; van Vliet, 2000, p. 399)","Difference between this and specification-based testing (van Vliet, 2000, p. 399; Souza et al., 2017, p. 3)?"
Fuzz Testing,"Technique? (IEEE, 2022, p. 36), Practice (inferred from mathematical-based testing), Approach (IEEE, 2022, p. 5)","Testing where ""high volumes of random (or near random) data, called fuzz, are used to generate [test] inputs"" (IEEE, 2022, p. 5) ""aimed at breaking the software"" (Bourque and Fairley, 2014, p. 4-8)","Mathematical-based Testing (IEEE, 2022, p. 36), Random Testing (Bourque and Fairley, 2014, p. 4-8; implied in IEEE, 2022, p. 5)",,"Often used for security testing (Bourque and Fairley, 2014, p. 4-8). This is tagged (?) as ""artificial intelligence"" (IEEE, 2022, p. 5), but I don't think AI is required"
Informal Reviews,Approach,,"Reviews (Washizaki, 2024, p. 12-14)",,
Informal Testing,Approach,"""Testing conducted in accordance with test plans and procedures that have not been reviewed and approved by a customer, user, or designated level of management"" (IEEE, 2017, p. 220)",,,
Infrastructure Testing,Approach,"Testing of ""infrastructure components to reduce the chances of downtime and improve the performance of the IT infrastructure"" (Washizaki, 2024, p. 5-9)","Non-functional Testing (Washizaki, 2024, p. 5-9)",,
Installability Testing,"Type (IEEE, 2022, p. 22; 2017, p. 228)","""Testing conducted to evaluate whether … test items can be installed as required in all specified environments"" (IEEE, 2017, p. 228; OG IEEE, 2013)","Portability Testing (IEEE, 2017, p. 228)",,"Related to portability testing? (van Vliet, 2000, p. 439)"
Installation Testing,"Level (Peters and Pedrycz, 2000, p. 445; implied by Washizaki, 2024, p. 5-8)","""System testing conducted in the operational environment of hardware configurations and other operational constraints""; may also verify installation procedures (Washizaki, 2024, p. 5-8)",Online Testing?,,"""Typically observe[s] the newly started server for a while, ensuring that the server doesn’t crash or otherwise misbehave"" (Washizaki, 2024, p. 6-10)"
Integration Testing,"Level (IEEE, 2022, pp. 12, 20-22, 26-27; Washizaki, 2024, p. 5-7)","Testing that ""verifies the interactions among SUT elements (for instance, components, modules, or subsystems)"" as well as ""external interfaces"" (Washizaki, 2024, p. 5-7) in a ""progressive"" manner (IEEE, 2017, p. 231)","Construction Testing (Washizaki, 2024, p. 4-7)",,"More effective when automated (Washizaki, 2024, p. 7-14) and ""can be performed at each development stage"" (Washizaki, 2024, p. 5-7). IEEE (2017, p. 231) says it can be used when integrating systems; is this captured by ""subsystems"" in the SWEBOK definition?  Difference between this and component integration testing? See also (Patton, 2006, p. 109)"
Interface Testing,"Level? (implied by IEEE, 2017, p. 235)","Testing that ""aims to verify whether the components' interface provides the correct exchange of data and control information"" (Washizaki, 2024, p. 5-10; similar in IEEE, 2017, p. 235)",Integration Testing?,,"""Usually, the test cases are generated from the interface specification"" (Washizaki, 2024, p. 5-10); related to integration testing?"
Interoperability Testing,"Type (IEEE, 2022, p. 22)","""Testing conducted to ensure that a modified system retains the capability of exchanging information with systems of different types, and of using that information"" (IEEE, 2017, p. 238)","Compatibility Testing (IEEE, 2022, p. 3)",,"See also ISO/IEC, 2023"
Keyword-driven Testing,Approach,"""Testing using test cases composed from keywords"": ""one or more words used as a reference to a specific set of actions intended to be performed during"" testing (IEEE, 2022, p. 5)","Automated Testing (IEEE, 2022, p. 35)",,"Keywords use at least one verb (IEEE, 2022, p. 5). See also ISO/IEC/IEEE 29119-5"
License Compliance Audits,Practice? (inferred from audits),"""Audits that reconcile[] license‐related information from multiple information sources, such as entitlement consumption against entitlement rights"" (IEEE, 2017, p. 250)","Audits (IEEE, 2017, p. 250)",,
"Load Balancing Testing (implied by Washizaki, 2024, p. 6-5)",,,,,"May be done by ""us[ing] infrastructure/operations services"" early on in the development process (Washizaki, 2024, p. 6-5)"
Load Testing,"Type (IEEE, 2022, pp. 5, 20, 22; 2017, p. 253; OG IEEE 2013)","Testing ""conducted to evaluate the behaviour of a test item under anticipated conditions of varying load"" (IEEE, 2022, p. 5; 2017, p. 253; OG IEEE 2013)","Non-functional Testing (Washizaki, 2024, p. 5-9); Performance Testing (IEEE, 2022, p. 5), Performance-related Testing (IEEE, 2022, p. 22), Performance Efficiency Testing (IEEE, 2017, p. 253; OG IEEE 2013)",,"Loads used are ""usually between anticipated conditions of low, typical, and peak usage"" (IEEE, 2022, p. 5; 2017, p. 253; OG IEEE 2013). Patton defines this as running the software with as large of a load as possible (2006, p. 86), and Washizaki (2024, p. 5-9) seems to imply something similar; going past this ""limit"" is the realm of ""stress testing"" (Washizaki, 2024, p. 5-9). Seeks to ""discover problems … or reliability, stability, or robustness violations"" (Washizaki, 2024, p. 5-9). Good to use if the software may have ""a large number of concurrent users"" (IEEE, 2022, p. 45)"
Localization Testing,"Type (IEEE, 2022, p. 22)","Testing ""a national or specific regional version of a product"" (IEEE, 2017, p. 253; OG ISO/IEC 2008)?",,,"Localization is related to internationalization (testing?), but can be done ""separately from the translation process"" (IEEE, 2017, p. 254)"
Loopback Testing,Practice?,"""Testing in which signals or data from a test device are input to a system or component, and results are returned to the test device for measurement or comparison"" (IEEE, 2017, p. 257)",,,"Related to ""mechanism loopback"" (IEEE, 2017, p. 270)?"
Maintainability Testing,"Type (IEEE, 2022, pp. 5, 22)","Testing ""conducted to evaluate the degree of effectiveness and efficiency with which a test item may be modified"" (IEEE, 2022, p. 5), including through ""corrections, improvements or adaptation of the software to changes in environment, as well as changes in requirements and functional specifications"" (Washizaki, 2024, p. 7-6; OG ISO/IEC/IEEE 14764)",,,"Six categories: corrective, preventive, adaptive, additive, perfective, and emergency (Washizaki, 2024, p. 7-4; ""emergency"" added in ISO/IEC/IEEE 14764 and mentioned in IEEE, 2017, p. 156); these may be separate test types"
Manual Testing,"Practice (IEEE, 2022, p. 22)","""Humans performing tests by entering information into a test item and verifying the results"" (IEEE, 2022, p. 6)","Scripted Testing (IEEE, 2022, p. 33)",,"""Inefficient, error prone and non-scalable"" (Washizaki, 2024, p. 6-5)"
Mathematical-based Testing,"Practice (IEEE, 2022, pp. 22, 36)","Testing based on ""the test item's required behaviour, input space or output space"" when they ""can be described in sufficient detail"" (IEEE, 2022, p. 36)","Automatic Testing (usually) (IEEE, 2022, p. 36)",,"Related to computation error testing from Patton (2006, p. 101)? See also ISO/IEC/IEEE 29119-4"
MC/DC Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 6)","Testing ""based on demonstrating that a single Boolean condition within a decision can independently affect the outcome of the decision"" (IEEE, 2022, p. 6)","Control Flow Testing (Washizaki, 2024, p. 5-13), Structure-based Testing (IEEE, 2022, pp. 6, 22)","Modified Condition Decision Testing (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 6)",
Metamorphic Testing,"Technique (Washizaki, 2024, p. 5-15; IEEE, 2022, pp. 6, 22)","Testing ""based on generating test cases based on existing test cases and metamorphic relations"" (IEEE, 2022, p. 6)","Mutation Testing (Washizaki, 2024, p. 5-15), Specification-based Testing (IEEE, 2022, pp. 6, 22)",,"Metamorphic Relation: ""description of how changes to the test inputs for a test case affect the expected outputs"" (IEEE, 2022, p. 6). Good to use when it is ""difficult to calculate expected results"" (IEEE, 2022, p. 45) See also Kanewala and Yueh Chen, 2019"
Mixed Entry Table Testing,Technique (inferred from decision table testing),"Testing ""based on exercising decision rules"" (IEEE, 2022, p. 4) in a mixed entry table: a ""decision table whose stub consists of rows in which limited and extended entries are written"" (IEEE, 2017, p. 278; OG ISO, 1984)","Decision Table Testing (IEEE, 2017, p. 278; OG ISO, 1984)",,"Decision Table: ""tabular representation of decision rules between causes and effects"" (IEEE, 2022, p. 3) or of ""sets of conditions and the actions resulting from them"" (IEEE, 2017, p. 123)"
Model Verification,Approach,,"Static Testing (IEEE, 2022, p. 17)",,
Model-based Testing,"Practice (IEEE, 2022, p. 22); Technique?","Testing that uses ""formal or semi-formal representations of the required behaviour of a … [test] item"" to ""generate test cases systematically and automatically"" at ""various levels of abstraction"" (IEEE, 2022, p. 32)","Mathematical-based Testing (IEEE, 2022, p. 36)","MBT (IEEE, 2022, p. 32)","Models ""vary in the degree of model formality"" (such as Agile, semiformal, and formal models) (Washizaki, 2024, p. 1-14). Good potential for automation/generation! See also Souza et al., 2017 (term used on p. 3) and Engström and Petersen, 2015"
Monkey Testing,"Technique (Washizaki, 2024, p. 5-14)","Testing using ""randomly generated test cases to cause the program to stop"" (Washizaki, 2024, p. 5-14)","Ad Hoc Testing (Washizaki, 2024, p. 5-14), Random Testing?, Fuzz Testing?",,Related to fuzz testing?
Multiple-Hit Decision Table Testing,Technique (inferred from decision table testing),"Testing ""based on exercising decision rules"" (IEEE, 2022, p. 4) in a multiple-hit decision table: a ""decision table where at least one set of conditions will be satisfied by more than one rule"" (IEEE, 2017, p. 285; OG ISO, 1984)","Decision Table Testing (IEEE, 2017, p. 285; OG ISO, 1984)",,"Decision Table: ""tabular representation of decision rules between causes and effects"" (IEEE, 2022, p. 3) or of ""sets of conditions and the actions resulting from them"" (IEEE, 2017, p. 123)"
Mutation Testing,"Technique (Washizaki, 2024, p. 5-15); Methodology (IEEE, 2017, p. 286)","Testing where ""test cases are randomly generated … or … specifically designed"" to detect ""slightly modified version[s] of the SUT"" called ""mutants"" (Washizaki, 2024, p. 5-15) or ""program mutations"" (IEEE, 2017, p. 286) and ""evaluate the ability of the test cases to detect [their] differences"" (IEEE, 2017, p. 286)","Structure-based Testing (Washizaki, 2024, p. 5-15), Fault-based Testing (Bourque and Fairley, 2014, p. 4-9)",,"Assumes that ""that more complex but real faults will be found by looking for simple syntactic faults"" and requires ""many mutants … [to] be automatically generated and executed systematically""; can be used to generate fuzz testing (Washizaki, 2024, p. 5-15)"
Negative Testing,Approach,"""The application of boundary value concepts to scenario testing""? (IEEE, 2022, p. 40)","Security Testing? (Washizaki, 2024, p. 5-9), Forcing Exception Testing? (Washizaki, 2024, p. 5-13), Boundary Value Analysis?, Scenario-based Testing? (IEEE, 2022, p. 40)","Invalid Testing, Dirty Testing (International Software Testing Qualifications Board, 2022)","""Negative test cases can be derived from the state and event combinations that do not appear"" in state models (Washizaki, 2024, p. 1-20)"
"Non-functional Testing (Washizaki, 2024, p. 5-8)",Approach,"Testing that ""targets the validation of non-functional aspects (such as performance, [security,] usability, or reliability)"" (Washizaki, 2024, p. 5-8; IEEE, 2022, p. 21) that tend to ""constrain the technologies to be used in the implementation"" (Washizaki, 2024, p. 1-4)",,,"Hundreds of subapproaches that can be ""performed at all test leves"" (Washizaki, 2024, p. 5-8). In constrast to functional testing (IEEE, 2022, p. 21)"
Off-line Testing,Practice?,"Testing ""in an environment without external interaction"" (Washizaki, 2024, p. 5-6)",,,
Online Testing,Practice?,"Testing that ""interacts with the real application environment"" (Washizaki, 2024, p. 5-6)",,,
Operational (Acceptance) Testing,"Level (IEEE, 2022, p. 22)","""Test[ing] to determine the correct installation, configuration and operation of a module and that it operates securely in the operational environment"" (ISO/IEC, 2018) or ""evaluate a system or component in its operational environment"" (IEEE, 2017, p. 303), particularly ""to determine if operations and/or systems administration staff can accept [it]"" (International Software Testing Qualifications Board, 2022)","Acceptance Testing (IEEE, 2022, p. 22; International Software Testing Qualifications Board, 2022; LambdaTest, 2024), Non-functional Testing (LambdaTest, 2024), Reliability Testing (likely incorrectly) (Bourque and Fairley, 2014, p. 4-6)","""Operational testing"" and ""operational acceptance testing"" are treated as synonyms in this glossary","Ensured by the use of TDD and ATDD (Washizaki, 2024, p. 6-9)"
Pair Testing,"Technique (Washizaki, 2024, p. 5-14)","Testing involving ""two individuals"" where ""one generates and runs the test cases[ and] the other observes and analyzes the testing process"" (Washizaki, 2024, p. 5-14)","Ad Hoc Testing (Washizaki, 2024, p. 5-14)",,"""Allows [for] generating test cases with broad and better test coverage"" (Washizaki, 2024, p. 5-14). Related to buddy testing?"
Pairwise Testing,"Technique (Washizaki, 2024, p. 5-11; IEEE, 2022, pp. 7, 22)","Testing ""in which test cases are designed to execute all possible discrete combinations of each pair of input parameters"" (IEEE, 2022, p. 7)","Combinatorial Testing (Washizaki, 2024, p. 5-11; IEEE, 2022, pp. 7, 22), Black-Box Testing (IEEE, 2022, p. 7)","Orthogonal Array Testing (OAT) (Washizaki, 2024, p. 5-11), although this seems disputed by other sources",
Path Testing,"Technique (Washizaki, 2024, p. 5-13)","Testing that ""aims to execute all entry-to-exit control flow paths in a SUT’s control flow graph"" (Washizaki, 2024, p. 5-13)","Control Flow Testing (Washizaki, 2024, p. 5-13)",,"""Exhaustive path testing is generally not feasible because of loops"" (Washizaki, 2024, p. 5-13), and infeasible paths ""are a significant problem"" (p. 5-5). The number of test cases should be at least ""the number of linearly independent paths through a program's source code"" (Washizaki, 2024, p. 4-2)"
Peer Reviews,Approach,"""Review[s] of work products performed by peers during development of the work products to identify defects for removal"" (Washizaki, 2024, p. 12-13; OG [14])","Reviews (Washizaki, 2024, p. 12-13), Static Analysis? (Washizaki, 2024, p. 12-13)",,"Potentially a byproduct of pair programming (or else there is another type of ""Pair Reviews"") (Washizaki, 2024, p. 12-14)"
Penetration Testing,Type (inferred from security testing),"Testing that ""tests a system in its final production environment … [by] submit[ting] malformed, malicious and random data to [its] entry points"" (Washizaki, 2024, p. 13-5)","Security Testing (Washizaki, 2024, p. 13-4)","Ethical Hacking Testing (Washizaki, 2024, p. 13-4)","Should be conducted by security experts (Washizaki, 2024, p. 13-5). Related to fuzz testing? (Washizaki, 2024, p. 13-5)"
Performance Efficiency Testing,Type (inferred from performance-related testing),,Performance-related Testing?,,"Difference between this and performance testing? Mentioned as the parent of stress testing (IEEE, 2022, p. 9) and capacity testing (IEEE, 2017, p. 58)"
Performance Testing,"Type (IEEE, 2022, pp. 7, 22, 26-27)","Testing ""conducted to evaluate the degree to which a test item accomplishes its designated functions within given constraints of time and other resources"" (IEEE, 2022, p. 7) or within ""specified performance requirements"" (Washizaki, 2024, p. 5-9)","Non-functional Testing (Washizaki, 2024, p. 5-8); Performance-related Testing (IEEE, 2022, p. 22)",,"Difference between this, performance efficiency testing, and performance-related testing? May be specific to ""real-time constraints"" (IEEE, 2022, p. 43). May be done by ""us[ing] infrastructure/operations services"" early on in the development process (Washizaki, 2024, p. 6-5)"
Performance-related Testing,"Type (IEEE, 2022, p. 22)",,,,Difference between this and performance testing?
Portability Testing,"Type (IEEE, 2022, pp. 7, 22)","Testing ""conducted to evaluate the ease with which a test item can be transferred from one hardware or software environment to another, including the level of modification needed"" (IEEE, 2022, p. 7)",,,Related to compatibility testing?
Power Testing?,Approach,"Testing ""based on power consumption and battery failure"" (IEEE, 2022, p. 43); term is original",Performance-related Testing,,
Prioritization Testing,Practice?,"Testing that ""schedule[s] test cases to increase the rate [and likelihood] of fault detection, … the coverage of code under test, and … reliability"" (Washizaki, 2024, p. 5-8)",,,"What does ""schedule"" mean in this context?"
Privacy Testing,Approach,"Testing that ""assess[es] the security and privacy of users’ personal data to prevent local attacks"" (Washizaki, 2024, p. 5-10)",,,"Assesses policies and profile/data management (Washizaki, 2024, p. 5-10); seems to overlap with IEEE's definition of security testing"
Procedure Testing,"Type (IEEE, 2022, pp. 7, 22)","Testing ""conducted to evaluate whether procedural instructions for interacting with a test item or using its outputs meet user requirements and support the purpose of their use"" (IEEE, 2022, p. 7)","Functional Suitability Testing (IEEE, 2022, p. 7)",,
Production Verification Testing,"Level (IEEE, 2022, p. 22)",,"Acceptance Testing (IEEE, 2022, p. 22)",,
Quick Testing,"Technique (Washizaki, 2024, p. 5-14)","Testing ""in which a very small test suite is selected and executed"" (Washizaki, 2024, p. 5-14)","Ad Hoc Testing (Washizaki, 2024, p. 5-14)",,"""Guarantees that no failure can be experienced because of SUT components that are not fully operational"" (Washizaki, 2024, p. 5-14), but this is not elaborated on"
Random Testing,"Technique (Washizaki, 2024, p. 5-12; IEEE, 2022, pp. 7, 22, 36), Practice? (inferred from mathematical-based testing)","Testing ""based on generating test cases to exercise randomly selected test item inputs"" (IEEE, 2022, p. 7)","Specification-based Testing (Washizaki, 2024, p. 5-12; IEEE, 2022, pp. 7, 22), Usage-based Testing (Washizaki, 2024, p. 5-15), Mathematical-based Testing (IEEE, 2022, p. 36)",,"Often used in automated testing (Washizaki, 2024, p. 5-12) and reliability testing (van Vliet, 2000, p. 439). Implied to be related to statistical testing (Washizaki, 2024, p. 5-15)"
Recovery Testing,"Type (IEEE, 2022, p. 22)",,"Performance-related Testing (IEEE, 2022, p. 22)",,Difference between this and disaster/recovery testing?
Recovery Testing,Approach,"Testing of ""software restart capabilities after a system crash or other disasters [sic]"" (Washizaki, 2024, p. 5-9)","Non-functional Testing (Washizaki, 2024, p. 5-9), Usability Testing? (Washizaki, 2024, p. 5-10)",,Difference between this and disaster/recovery testing?
Regression Testing,"Level? (Barbosa et al., 2006, p. 3)","""The selective retesting of software or a component to verify that the modifications have not caused unintended effects"" (Washizaki, 2024, pp. 7-5 to 7-6); ""testing performed following modifications to a test item or to its operational environment, to identify whether failures in unmodified parts of the test item occur"" (IEEE, 2022, p. 8) and ""to verify that modifications have not caused unintended effects"" (IEEE, 2017, p. 372)","Functional Testing, Non-functional Testing, Continuous Testing (Washizaki, 2024, p. 5-8)","Non-regression Testing (Washizaki, 2024, p. 5-8)","""Does not test that the modification works correctly""; this is ""retesting"" (IEEE, 2022, p. 8; also described as separate in Washizaki, 2024, p. 6-5). Interesting to note it is sometimes described as such (Washizaki, 2024, pp. 7-5 to 7-6; IEEE, 2017, p. 372), maybe just in the sense of ""testing again""? Should be part of any test strategy and its level should be ""based on a knowledge of the risks associated with developers making changes"" (IEEE, 2022, p. 23), although it can be applied to any level (Washizaki, 2024, p. 5-8), and ""play[s] an important role in software engineering operations"" (Washizaki, 2024, p. 6-5) and ""maintenance"" (Washizaki, 2024, p. 7-5)"
Reliability Testing,"Type (IEEE, 2022, pp. 8, 22)","""Testing conducted to evaluate the ability of a test item to perform its required functions, including evaluating the frequency with which failures occur"" (IEEE, 2022, p. 8)","Non-functional Testing (Washizaki, 2024, p. 5-9)",,"The use of the test item is under ""stated conditions for a specified period of time"" (IEEE, 2022, p. 8). Often uses statistical models of user behaviour, reliability growth models (Washizaki, 2024, p. 5-9), and/or random testing (van Vliet, 2000, p. 439) and may be facilitated by DevOps (Washizaki, 2024, p. 5-9) such as ""infrastructure/operations services"", which can be done early on in the development process (Washizaki, 2024, p. 6-5). Can be done using ""the test-retest method, the alternative form method, the split-halves method and the internal consistency method"" (verify this applies to software) (Washizaki, 2024, p. 18-14)"
Requirements-based Testing,"Technique (IEEE, 2022, pp. 8, 22)","Testing ""based on exercising atomic requirements"" (IEEE, 2022, p. 8)","Specification-based Testing (IEEE, 2022, pp. 8, 22)",,
Response-Time Testing,Approach,,"Performance Testing (Washizaki, 2024, p. 5-9); Performance-related Testing (IEEE, 2022, p. 22)",,"Good to use if the software may have ""a large number of concurrent users"" (IEEE, 2022, p. 45). See also ISO/IEC, 2023?"
Retesting,Approach,"""Testing performed to check that modifications made to correct a fault have successfully removed the fault"" (IEEE, 2022, p. 8)",,"Confirmation Testing (IEEE, 2022, p. 8)","Should be part of any test strategy and its level should be ""based on a knowledge of the risks associated with developers making changes"" (IEEE, 2022, p. 23) and ""play[s] an important role in software  engineering operations"" (Washizaki, 2024, p. 6-5). ""In most cases, the original test cases associated with the fixed code are used for retesting, but they are sometimes supplemented by new test cases that provide improved coverage"" (IEEE, 2022, p. 35)"
Reviews,Approach,,"Static Testing (IEEE, 2022, pp. 9, 17, 25, 28), Static Analysis? (Washizaki, 2024, p. 12-13)",,"""Can identify issues early in development or even before a component is designed"" (Washizaki, 2024, p. 12-13). See also ISO/IEC 20246"
Risk-based Testing,Approach,"Testing ""in which the management, selection, prioritization, and use of testing activities and resources are consciously based on corresponding types and levels of analysed risk"" (IEEE, 2022, p. 8)","Requirements-based Testing? (IEEE, 2022, p. 20), Dynamic Testing? (IEEE, 2022, p. 18)",,"Recommended technique for ""choosing the subset of possible tests that are most likely to uncover issues of interest"" (IEEE, 2022, p. 18); see also the ISO/IEC 25000 SQuaRE family of standards and IEEE, 2022, p. 20"
Robustness Testing,Approach,,"Boundary-Value Analysis (Washizaki, 2024, p. 5-11)",,
Sandwich Testing,Level (inferred from integration testing),,"Integration Testing (Washizaki, 2024, p. 5-7)","Mixed Testing (Washizaki, 2024, p. 5-7)",
Scalability Testing,Approach,"Testing the ""capability of a product to handle growing or shrinking workloads or to adapt its capacity to handle variability"" (ISO/IEC, 2023a)","Non-functional Testing (Washizaki, 2024, p. 5-8)",,"""Particularly important in distributed or high-performance systems"" (Washizaki, 2024, p. 5-9) and may be done by ""us[ing] infrastructure/operations services"" early on in the development process (Washizaki, 2024, p. 6-5). Washizaki seems to define it as usability testing (2024, p. 5-9), despite correctly defining ""scalability"" (2024, p. 5-5). Related to elasticity testing?"
Scenario Testing,"Technique (Washizaki, 2024, p. 5-12; IEEE, 2022, pp. 9, 22)","Testing ""based on exercising sequences of interactions between the test item and other systems,"" including users (IEEE, 2022, p. 9), that is ""the SUT’s behavioral aspects"" (Washizaki, 2024, p. 5-12)","Specification-based Testing (Washizaki, 2024, p. 5-12; IEEE, 2022, pp. 9, 22), Model-based Testing (implied by Bourque and Fairley, 2014, p. 4-10)",,"""Often used with test automation harnesses"" (Washizaki, 2024, p. 5-12)"
Scripted Testing,"Practice (IEEE, 2022, pp. 20, 22)","""Testing performed based on a documented test script"" (IEEE, 2022, p. 9)","Manual Testing (usually) (IEEE, 2022, pp. 9, 33), Automatic Testing (""typically requires more detail"") (IEEE, 2022, p. 33)",,"""Helps achieve required test coverage levels"" (IEEE, 2022, p. 33)"
Security Testing,"Type (IEEE, 2022, pp. 9, 22, 26-27)","Testing that validates that ""the SUT is protected from external attacks"" (Washizaki, 2024, p. 5-9), that ""a test item, and associated data and information, are protected so that"" only ""authorized persons or systems"" can use them as intended (IEEE, 2022, p. 9), and ""that the software implementation contains none of the known vulnerabilities"" (Washizaki, 2024, p. 13-14)",,,"Verifies ""confidentiality, integrity, and availability"" and usually includes negative testing (Washizaki, 2024, p. 5-9). Good to use when the software will be widely available (IEEE, 2022, p. 45)"
Similarity-based Prioritization Testing,Practice?,"Testing that prioritizes test cases ""starting from those most dissimilar according to a predefined distance function"" (Washizaki, 2024, p. 5-8)","Prioritization Testing (Washizaki, 2024, p. 5-8)",,
Smoke Testing,"Technique (Washizaki, 2024, p. 5-14)","Testing that ""ensures that the SUT's core functionalities behave properly"" and ""the SUT is operational before the planned testing begins"" (Washizaki, 2024, p. 5-14)","Ad Hoc Testing, Quick Testing (Washizaki, 2024, p. 5-14), Unscripted Testing (implied by Washizaki, 2024, p. 5-14), Off-line Testing?","Build Verification Testing (Washizaki, 2024, p. 5-14)","""Prevents failures because of the test environment"" (Washizaki, 2024, p. 5-14). Seems to be implied to be the responsibility of DevOps (Washizaki, 2024, p. 6-9)"
Specification-based Testing,"Technique (Washizaki, 2024, p. 5-10; IEEE, 2022, p. 22; Souza et al., 2017, p. 3; implied in IEEE, 2022, pp. 2-4, 6-9)","""Testing in which the principal test basis is the external inputs and outputs of the test item"" (IEEE, 2022, p. 9) that ""select[s] a few test cases from the input domain that can detect specific categories of faults"" (Washizaki, 2024, pp. 5-10--5-11)","Dynamic Testing (IEEE, 2022, p. 17)","Black-Box Testing (Washizaki, 2024, p. 5-10; IEEE, 2022, p. 9; International Software Testing Qualifications Board, 2022; IEEE, 2017, p. 2; van Vliet, 2000, p. 399), Domain Testing (Washizaki, 2024, p. 5-10), Closed-Box Testing (IEEE, 2022, p. 9), Input Domain-Based Testing (implied by Bourque and Fairley, 2014, p. 4-8), Functional Testing (van Vliet, 2000, p. 399)","Should be done before structure-based testing to avoid bias towards ""test cases based on how the module works"" (Patton, 2006, p. 113). Difference between this and functional testing (van Vliet, 2000, p. 399; Souza et al., 2017, p. 3)?"
State Transition Testing,"Technique (Washizaki, 2024, p. 5-12; IEEE, 2022, pp. 9, 22)","Testing ""derived to cover the states and transitions"" (Washizaki, 2024, p. 5-12) ""in a state model"" (IEEE, 2022, p. 9)","Specification-based Testing (Washizaki, 2024, p. 5-12; IEEE, 2022, pp. 9, 22), Model-based Testing (Bourque and Fairley, 2014, p. 4-10)",,"Washizaki implies the SUT is represented by a finite-state machine (2024, p. 5-12). See also Patton, 2006, pp. 79-87"
Statement Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, pp. 9, 22)","Testing ""based on exercising executable statements in the source code of the test item"" (IEEE, 2022, p. 9)","Control Flow Testing (Washizaki, 2024, p. 5-13), Structure-based Testing (IEEE, 2022, p. 22)",,
Static Analysis,Approach,"""Involves the use of tools to detect anomalies in code or documents without execution"" (IEEE, 2022, p. 18)","Static Testing (IEEE, 2022, pp. 9, 17, 25, 28)",,See also ISO/IEC 20246
Static Testing,Approach,"""Testing in which a test item is examined against a set of quality or other criteria without the test item being executed"" (IEEE, 2022, p. 9)",,,"""Helps form an optimal test strategy"" (IEEE, 2022, p. 21), ""can be performed anywhere in the life cycle"" (IEEE, 2022, p. 17), including ""prior to dynamic testing[,] and can find defects before test execution becomes possible"" (IEEE, 2022, p. 21). Not always considered ""testing"" (Washizaki, 2024, p. 5-2). See also ISO/IEC 20246"
Statistical Testing,Approach,,"Usage-based Testing (Washizaki, 2024, p. 5-15)",,"""Often provide[s] a snapshot of the more troublesome areas of the software product under examination"" (Washizaki, 2024, p. 12-8). ""Usage-based statistical testing is applied more during the acceptance testing stage"" (Washizaki, 2024, p. 5-15); how to track this? Implied to be related to random testing (Washizaki, 2024, p. 5-15)"
Stress Testing,"Type (IEEE, 2022, pp. 9, 22)","Testing of ""the SUT beyond its capabilities [done] by generating a load greater than what the system is expected to handle"" (Washizaki, 2024, p. 5-9) or providing insufficient resource availability (IEEE, 2022, p. 9)","Non-functional Testing (Washizaki, 2024, p. 5-9), Performance Testing (IEEE, 2022, p. 9), Performance-related Testing (IEEE, 2022, p. 22), Boundary Condition Testing (Patton, 2006, p. 86)",,
Structure-based Testing,"Technique (Washizaki, 2024, pp. 5-10, 5-13; implied in IEEE, 2022, pp. 2, 4, 6, 9)","Testing ""derived from an examination of the structure[, internal contents or implementation (IEEE, 2017, p. 199)] of the test item"" (IEEE, 2022, p. 9)","Dynamic Testing (Washizaki, 2024, p. 5-13; IEEE, 2022, pp. 9, 17), Static Testing (Washizaki, 2024, p. 5-13)","White-Box Testing (Washizaki, 2024, p. 5-10; IEEE, 2022, p. 9; International Software Testing Qualifications Board, 2022; Patton, 2006, p. 55), Glass-Box Testing (Washizaki, 2024, p. 5-10; IEEE, 2022, p. 9; International Software Testing Qualifications Board, 2022; Peters and Pedrycz, 2000, p. 439), Code-based Testing (Washizaki, 2024, p. 5-13; implied by Bourque and Fairley, 2014, p. 4-8), Structural Testing (IEEE, 2022, p. 9; International Software Testing Qualifications Board, 2022), Clear-Box Testing (Washizaki, 2024, p. 5-10; International Software Testing Qualifications Board, 2022; Patton, 2006, p. 55)","""Can be performed at different levels (such as code development, code inspection, or unit testing)"" (Washizaki, 2024, p. 5-13). International Software Testing Qualifications Board (2022) has more synonyms"
Syntax Testing,"Technique (Washizaki, 2024, p. 5-11; IEEE, 2022, p. 22)","Testing based on ""the SUT specifications in a formal language"" (Washizaki, 2024, p. 5-11)","Specification-based Testing (Washizaki, 2024, p. 5-11; IEEE, 2022, p. 22), Functional Testing? (Washizaki, 2024, p. 5-11), Static Testing? (Washizaki, 2024, p. 1-10), Model-based Testing (implied by Bourque and Fairley, 2014, p. 4-10)","Formal Specification-Based Testing (Washizaki, 2024, p. 5-11)","""Permits automatic derivation of functional test cases[,] … provides an oracle for checking test results"" (Washizaki, 2024, p. 5-11), and ""permit[s] desired properties of the specified software to be proved"" (Washizaki, 2024, p. 1-10). Test cases can be generated from these formal requirements (e.g., BDD scenarios and state models), but ""determining an expected result is not always possible"" and may require ""additional business domain expertise"" (Washizaki, 2024, p. 1-20). See also (Peters and Pedrycz, 2000, pp. 448-449; Intana et al., 2020, p. 260)"
System Integration Testing,"Level (IEEE, 2022, pp. 12, 22)",,,,
System Testing,"Level (IEEE, 2022, pp. 12, 20-22, 26-27; Washizaki, 2024, p. 5-7)","""Testing the behavior of the SUT"", usually in regards to ""non-functional system requirements"" (Washizaki, 2024, p. 5-7).",,,"A system is ""an interacting combination of elements to accomplish a defined objective"" that includes ""hardware, software, firmware, people, information, techniques, facilities, services, and other support elements"" (Washizaki, 2024, p. 1-5; OG INCOSE). Only the software component is in scope of this research; this is done in some cases where ""the software is itself the system of interest, and hardware and support system are regarded as the platform or infrastructure"" (Washizaki, 2024, p. 1-5)"
"Technical Reviews (Washizaki, 2024, p. 12-14)",Approach,,Reviews,,"""Can … be more focused and address a specific project phase"" (Washizaki, 2024, p. 12-14; OG [24]). More types given by Washizaki (2024, p. 12-14)"
Top-Down Testing,Level (inferred from integration testing),,"Integration Testing (Washizaki, 2024, p. 5-7)",,
Tours,"Practice (IEEE, 2022, p. 34)","Testing that is quite general and ""guides testers through the paths of an application like a tour guide leads a tourist through the landmarks of a big city"" (IEEE, 2022, p. 34)","Exploratory Testing, Experience-based Testing (IEEE, 2022, p. 34)",,
t-Wise Testing,"Technique (Washizaki, 2024, p. 5-11)","Testing that ""considers every possible combination of [some] t input"" (Washizaki, 2024, p. 5-11)","All Combinations Testing (Washizaki, 2024, p. 5-11)",,"""More than one pair is derived (i.e., by including higher-level combinations)"" (Washizaki, 2024, p. 5-11)"
Unit Testing,"Level (IEEE, 2022, pp. 12, 20-22, 26-27; Washizaki, 2024, p. 5-6)","""Testing of individual hardware or software components"" (IEEE, 2012, p. 8)","Construction Testing (Washizaki, 2024, p. 4-7), Automated Testing (often) (Washizaki, 2024, p. 4-14)","Component Testing (IEEE, 2022, pp. 12-13; International Software Testing Qualifications Board, 2022; Peters and Pedrycz, 2000, p. 444), Module Testing (International Software Testing Qualifications Board, 2022; Patton, 2006, p. 109)","Difference between this and component integration testing? A component is an ""entity with discrete structure … within a system considered at a particular level of analysis"" (ISO/IEC, 2023) or an ""atomic-level software component of the software architecture that can be subjected to stand-alone testing"" (Washizaki, 2024, p. 10-3), and a (functional) unit is an ""entity … capable of accomplishing a specified purpose"" (IEEE, 2017, p. 196); however, ""the terms module, component, and unit [sic] are often used interchangeably or defined to be subelements of one another in different ways depending upon the context"" with no standardized relationship (IEEE, 2017, p. 82). These components ""could be the individual subprograms or components, a subsystem, or a composition of … components"" (Washizaki, 2024, p. 5-6). However, ""component"" is sometimes defined differently than ""module"": ""components differ from classical modules for being re-used in different contexts independently of their development"" (Baresi and Pezzè, 2006, p. 107). See also Engström and Petersen, 2015"
Unscripted Testing,Approach,"""Testing in which the tester's actions are not prescribed by written instructions in a test case"" (IEEE, 2022, p. 15)","Dynamic Testing (IEEE, 2022, p. 15)",,
Usability Testing,"Type (IEEE, 2022, pp. 22, 26-27)","Testing that ""evaluate[s] how easy it is for end-users to learn to use the software"" by testing functionality, documentation, and/or recovery (Washizaki, 2024, p. 5-10)",,"Human-Computer Interaction Testing? (Washizaki, 2024, p. 5-10)","Related to acceptance testing (van Vliet, 2000, p. 439)"
Usage-based Testing,"Technique (Washizaki, 2024, p. 5-15)","Testing that ""usually rel[ies] on a usage model or profiles"" in the context of ""the actual operational environment"" and ""usage by the target stakeholder"" (Washizaki, 2024, p. 5-15)",Online Testing?,,
Use Case Testing,"Technique (IEEE, 2022, p. 22)",,"Specification-based Testing (IEEE, 2022, p. 22)",,
User Acceptance Testing,"Level (IEEE, 2022, p. 22)",,"Acceptance Testing (IEEE, 2022, p. 22)",,"Also mentioned by Washizaki (2024, p. 6-13)"
Validation Tests,Approach,,,,
Volume Testing,Approach,"Testing to assess ""the SUT’s internal storage limitations and its ability to exchange data and information"" (Washizaki, 2024, p. 5-9)","Non-functional Testing (Washizaki, 2024, p. 5-9)",,
,,,,,
,,,,,See also the ISO/IEC/IEEE 29119 series (especially 29119-4); 29119-2 provides more information on test processes
,,,,,"See also ISO/IEC 2382:2015, Information technology -— Vocabulary"
,,,,,Compare ISO/IEC TR 19759:2016 to SWEBOK
,,,,,"Investigate convertibility/functional size measurement (IEEE, 2017, p. 103)"
