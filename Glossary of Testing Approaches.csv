Name,Approach Category,Definition,Parent(s),Synonym(s),Notes
A/B Testing,"Practice (IEEE, 2022, p. 22)","Testing ""that allows testers to determine which of two systems or components performs better"" (IEEE, 2022, p. 1)","Statistical Testing (IEEE, 2022, pp. 1, 35)","Split-Run Testing (IEEE, 2022, pp.1, 35)","""Not a test case generation technique as test inputs are not generated""; ""us[es] the existing system as a partial oracle"" (IEEE, 2022, p. 36)"
Acceptance Testing,"Level (IEEE, 2022, pp. 12, 21-22, 26-27; 2017, p. 467; Washizaki, 2024, p. 5-7; Hamburg and Mogyorodi, 2024)","""Testing conducted to enable a user, customer, or other authorized entity to determine whether to accept a system or component"" and whether it ""satisfies its acceptance criteria"" and/or ""the contractual requirements are met"" (IEEE, 2017, p. 5)","System Testing (van Vliet, 2000, p. 439)","Qualification Testing (Bourque and Fairley, 2014, p. 4-6)","""May or may not involve the developers of the system"" (Bourque and Fairley, 2014, p. 4-6), but ""usually performed by the purchaser … with the … vendor"" (IEEE, 2017, p. 5). Related to usability testing (van Vliet, 2000, p. 439) and validation testing (IEEE, 2017, p. 5). Note that IEEE (2017, p. 5) makes a distinction between ""acceptance testing"" and ""an acceptance test"""
Accessibility Testing,"Type (IEEE, 2022, pp. 1, 22; implied by its quality)","Testing ""used to measure the degree to which a test item can be operated by users with the widest possible range of characteristics and abilities"" (IEEE, 2022, p. 1; 2013, p. 2) ""to achieve a specified goal in a specified context of use"" (ISO/IEC, 2011)","Usability Testing (IEEE, 2022, p.1 [although listed separately on p. 22]; ISO/IEC, 2011)","User Assistance Testing? (ISO/IEC, 2023a; see ISO/IEC 25019)","Good to use when the software will be widely available or when it will be used by people with disabilities (IEEE, 2022, p. 45)"
Ad Hoc Reviews,Approach,"Reviews ""performed informally without a structured process"" (Hamburg and Mogyorodi, 2024)",Reviews,,See ISO 20246
Ad Hoc Testing,"Technique (Washizaki, 2024, p. 5-14)","Testing where ""test cases are derived by relying on the software engineer’s skill, intuition, and experience with similar programs"" to ""identify[] test cases that are not easily generated by more formalized techniques"" (Washizaki, 2024, p. 5-14) ""performed without test analysis [or] test design"" (Hamburg and Mogyorodi, 2024)","Experience-based Testing (Washizaki, 2024, p. 5-14); Informal Testing (Hamburg and Mogyorodi, 2024)",,
Adaptive Random Testing,"Technique (Washizaki, 2024, p. 5-12)","Random testing ""in which other input selection criteria direct the random input sampling"" (Washizaki, 2024, p. 5-12)","Random Testing (Washizaki, 2024, p. 5-12)",,Kind of a vague definition; what are these criteria?
Adversarial Testing,"Technique (Hamburg and Mogyorodi, 2024)","Testing ""based on the attempted creation and execution of adversarial examples [(""input[s] to an ML model … that result[] in the model outputting an incorrect result with high confidence"")] to identify defects in an ML model"" (Hamburg and Mogyorodi, 2024)",ML Model Testing,,See ISO 29119-11
All Combinations Testing,"Technique (Washizaki, 2024, p. 5-11; IEEE, 2022, p. 22)","Testing that ""focuses on all … the possible input combinations"" (Washizaki, 2024, p. 5-11)","Combinatorial Testing (Washizaki, 2024, p. 5-11; IEEE, 2022, p. 22)",,
All-C-Uses Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)","Testing that aims to execute all ""use[s] of the value of a variable in any type of statement"" (IEEE, 2017, p. 83; OG IEEE, 2015) as ""defined in [a given] data definition""? (IEEE, 2017, p. 115; OG IEEE, 2015)","Data Flow Testing (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)","All Computation Data Uses (implied by IEEE, 2017, p. 83)","See also van Vliet (2000, pp. 424-425)"
All-Definitions Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)","Testing that aims to execute all ""statement[s] where a variable is assigned a value""? (IEEE, 2017, p. 115; OG IEEE, 2015)","Data Flow Testing (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)",,"A ""weaker strateg[y]"" than all-DU-paths testing (Washizaki, 2024, p. 5-13). See also van Vliet (2000, pp. 424-425)"
All-DU-Paths Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)","Testing that ""requires executing, for each variable, every control flow path segment from a definition of that variable to the use of that definition"" (Washizaki, 2024, p. 5-13), or that aims to execute all ""predicate or computational data use[s that] … use[] the value defined in [a given] data definition""? (IEEE, 2017, p. 125; OG IEEE, 2015)","Data Flow Testing (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)",,"""The strongest data flow testing criterion"" (Washizaki, 2024, p. 5-13). See also van Vliet (2000, pp. 424-425)"
All-P-Uses Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)","Testing that aims to execute all ""predicate data use[s that] … use[] the value defined in [a given] data definition""? (IEEE, 2017, p. 115; OG IEEE, 2015)","Data Flow Testing (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)",,"See also van Vliet (2000, pp. 424-425)"
All-Uses Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)",,"Data Flow Testing (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)",,"A ""weaker strateg[y]"" than all-DU-paths testing (Washizaki, 2024, p. 5-13). See also van Vliet (2000, pp. 424-425)"
Alpha Testing,"Level (IEEE, 2022, p. 22; implied by acceptance testing)","The ""first stage of testing before a product is considered ready for commercial or operational use"" (IEEE, 2017, p. 17)","Acceptance Testing (IEEE, 2022, p. 22; Hamburg and Mogyorodi, 2024); Unscripted Testing (Washizaki, 2024, p. 5-8)",,"""Often performed only by users within the organization developing the software"" (IEEE, 2017, p. 17), by ""a small, selected group of potential users"" (Washizaki, 2024, p. 5-8), or ""in the developer's test environment by roles outside the development organization"" (Hamburg and Mogyorodi, 2024). Related to beta testing (IEEE, 2017, p. 17; Washizaki, 2024, p. 5-8)"
API Testing,Approach,"A specific form of interface testing that ""simulate[s] the use of APIs by end-user applications"", including ""generating parameters"", ""defining internal data"" (Washizaki, 2024, p. 5-10), and ""submitting requests"" (Hamburg and Mogyorodi, 2024)","Interface Testing (Washizaki, 2024, p. 5-10)","Application Program Interface Testing (Washizaki, 2024, p. 5-10)",
Attacks,"Practice (IEEE, 2022, p. 34)","Testing with the goal of ""exploiting a specific … way of thinking about how and why software fails … [which] can be behaviour-based"" (IEEE, 2022, p. 34)","Experience-based Testing (IEEE, 2022, p. 34)",,"""An example of a security attack would be to block access to software libraries"" (IEEE, 2022, p. 34). This term can also be defined as a ""malicious action or interaction with the system or its environment that has the potential to result in a fault or an error, and thereby possibly in a failure, or an adverse consequence"" (IEEE, 2019, p. 7) which is essentially the same definition with the modification of being ""malicious""; like the difference between white- and black-hat hacking"
Audio Testing,Approach,"""Testing to determine if the game music and sound effects will engage the user in the game and enhance the game play [sic]"" (Hamburg and Mogyorodi, 2024)",,,
Audits,Practice?,"""Independent examination[s] of … work products to assess compliance with specifications, standards, contractual agreements, or other criteria"" (IEEE, 2017, p. 36; OG ISO/IEC TS 24748-1:2016) ""often mandated to be performed by third parties"" (Washizaki, 2024, p. 12-14; similar in Hamburg and Mogyorodi, 2024)","Static Analysis? (Washizaki, 2024, p. 12-13), Static Testing, Compliance Testing (implied by IEEE, 2022, p. 44)",,"Also described as testing ""used to verify compliance with standards"" (IEEE, 2022, p. 44)"
Automated Testing,"Practice (IEEE, 2022, pp. 20, 22)","Testing ""executed by a test automation tool"" (IEEE, 2022, p. 35)","Scripted Testing (IEEE, 2022, p. 33)",,"Often cost-effective ""if a set of test cases is going to be executed 5 or more times"" (IEEE, 2022, p. 35) but ""must be automated as much as possible throughout the entire software delivery process, including throughout development and operations"", and at all levels (Washizaki, 2024, p. 6-13). See also ""automated verification system "" (IEEE, 2017, p. 37)"
Back-to-Back Testing,"Practice (IEEE, 2022, p. 22)","Testing ""whereby an alternative version of the system is used to generate expected results for comparison from the same test inputs"" (IEEE, 2022, p.2) or where ""two or more variants of a program are executed with the same inputs, the outputs are compared, and errors are analyzed in case of discrepancies"" (IEEE, 2017, p. 38; similar in Hamburg and Mogyorodi, 2024; OG Spillner)","Non-functional Testing (Washizaki, 2024, p. 5-9)","Differential Testing (IEEE, 2022, p.2)","""Not a test case generation technique as test inputs are not generated"" (IEEE, 2022, p. 35). Similar to testing using a pseudo-oracle (Barr et al., 2015, p. 515) and related to mutation testing (IEEE, 2017, p. 38)"
Backup and Recovery Testing,Type (inferred from reliability testing),"Testing ""that measures the degree to which system state can be restored from backup within specified parameters of time, cost, completeness, and accuracy in the event of failure"" (IEEE, 2013, p. 2)","Reliability Testing (IEEE, 2013, p. 2)",,"Nonatomic; captures both ""backup"" and ""recovery"". Seems to be what is meant by ""recovery testing"" in the context of performance"
"Backup Testing (implied by Washizaki, 2024, p. 6-8)",,,,,"""Should be constantly rehearsed as changes to the production environment are made"" (Washizaki, 2024, p. 6-8)"
Base Choice Testing,"Technique (IEEE, 2022, p. 22)",,"Combinatorial Testing (IEEE, 2022, p. 22)",,
Beta Testing,"Level (IEEE, 2022, p. 22)","The ""second stage of testing when a product is in limited production use"" (IEEE, 2017, p. 17)","Acceptance Testing (IEEE, 2022, p. 22; Hamburg and Mogyorodi, 2024); Unscripted Testing (Washizaki, 2024, p. 5-8)",,"""Often performed at a customer site"" (IEEE, 2017, p. 45) by ""a larger set of representative users"" (Washizaki, 2024, p. 5-8) or, more specifically, ""at an external site to the developer's test environment by roles outside the development organization"" (Hamburg and Mogyorodi, 2024); related to alpha testing (Washizaki, 2024, p. 5-8)"
Big-Bang Testing,Level (inferred from integration testing),"""Testing in which … [components of a system] are combined all at once into an overall system, rather than in stages"" (IEEE, 2017, p. 45)","Integration Testing (Washizaki, 2024, p. 5-7; IEEE, 2017, p. 45)",,
Bottom-Up Testing,Level (inferred from integration testing),"Integration testing (Washizaki, 2024, p. 5-7) that ""starts with the lowest‐level components … and proceeds through progressively higher‐levels"" (IEEE, 2017, p. 49; OG ISO/IEC 2015)","Integration Testing (Washizaki, 2024, p. 5-7)",,
Boundary Value Analysis,"Technique (IEEE, 2022, pp. 2, 20, 22; Washizaki, 2024, p. 5-11; Hamburg and Mogyorodi, 2024)","Testing ""based on exercising the boundaries of equivalence partitions"" (IEEE, 2022, p. 2; simlar in Hamburg and Mogyorodi, 2024) (i.e., ""minimum or maximum input[s], internal [values], or output value[s] specified for a system or component"" (IEEE, 2017, p. 49))","Specification-based Testing (Washizaki, 2024, p. 5-11; IEEE, 2022, pp. 2, 22; Hamburg and Mogyorodi, 2024), Equivalence Partitioning (IEEE, 2022, p. 2; implied by Hamburg and Mogyorodi, 2024), Functional Testing? (IEEE, 2022, p. 20)",,"Seems to be related to stress testing (IEEE, 2017, p. 49); See also Patton, 2006, pp. 70-74"
Branch Condition Combination Testing,"Technique (IEEE, 2022, p. 22; Hamburg and Mogyorodi, 2024)","Testing ""designed to exercise outcome combinations of atomic conditions"" (Hamburg and Mogyorodi, 2024)","Structure-based Testing (IEEE, 2022, p. 22; Hamburg and Mogyorodi, 2024)","(Multiple) Condition Testing (Hamburg and Mogyorodi, 2024; Patton, 2006, p. 120), Condition Combination Testing (Hamburg and Mogyorodi, 2024), Extended Branch Coverage? (van Vliet, 2000, p. 422)",Difference between this and branch condition testing?
Branch Condition Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)",,"Control Flow Testing (Washizaki, 2024, p. 5-13), Structure-based Testing (IEEE, 2022, p. 22)","(Multiple) Condition Testing? (Patton, 2006, p. 120), Extended Branch Coverage? (van Vliet, 2000, p. 422)",Difference between this and branch condition combination testing?
Branch Testing,"Technique (IEEE, 2022, pp. 2, 22; Washizaki, 2024, p. 5-13; Hamburg and Mogyorodi, 2024)","Testing ""based on exercising branches [or ""execut[ing] each outcome of each decision point"" (IEEE, 2017, p. 51)] in the control flow of the test item"" (IEEE, 2022, p. 2)","Control Flow Testing (Washizaki, 2024, p. 5-13), Structure-based Testing (IEEE, 2022, pp. 2, 22; Hamburg and Mogyorodi, 2024)",,"IEEE (2017, p. 51) says it is ""designed to execute each outcome of each decision point""; is this level of coverage required or advised?"
Buddy Testing,"Technique (Washizaki, 2024, p. 5-14)","Testing that ""generates test cases by using internal architecture knowledge and testing specific knowledge"" (Washizaki, 2024, p. 5-14); this definition seems vague","Ad Hoc Testing (Washizaki, 2024, p. 5-14)",,Related to pair testing?
Build Verification Testing (BVT),Practice (inferred from automated testing),"""Automated test[ing] that validates the integrity of each new build and verifies its key/core functionality, stability, and testability"" (Hamburg and Mogyorodi, 2024)","Automated Testing (Hamburg and Mogyorodi, 2024); Integrity, Functionality, Stability, and Testability Testing (if they exist)",,
Business Process Testing,"Technique (Washizaki, 2024, p. 5-12)","Scenario-based testing focused ""on the roles in a workflow specification"" (Washizaki, 2024, p. 5-12)","Scenario-based Testing (Washizaki, 2024, p. 5-12)",,
"Canary (Release) Testing (see Washizaki, 2024, pp. 6-5, 6-10)","Technique (Washizaki, 2024, p. 6-5)","""A partial and time-limited deployment of a change in a service and an evaluation of that change"" to help ""decide whether to proceed with a complete deployment"" (Washizaki, 2024, p. 6-10)",,,"A method for ""testing the software in the production system context"" which ""can be particularly challenging"" (Washizaki, 2024, p. 6-5)"
Capacity Testing,"Type (IEEE, 2022, p. 22; 2013, p. 2; implied by its quality (ISO/IEC, 2023a))","Testing that evaluates the ""capability of a product to meet requirements for the maximum limits of a product parameter"", such as the number of concurrent users, transaction throughput, or database size (ISO/IEC, 2023a)","Performance Testing (Washizaki, 2024, p. 5-9), Performance-related Testing (IEEE, 2022, p. 22), Performance Efficiency Testing (IEEE, 2013, p. 2; ISO/IEC, 2023a), Volume Testing (potentially) (IEEE, 2017, p. 508; OG 2013)",,"Has the following subcategories from IEEE (2017): channel capacity (p. 67), memory capacity (p. 270), storage capacity (p. 441)"
Capture-Replay Driven Testing,"Practice (IEEE, 2022, p. 22; inferred from automated testing); Approach (Hamburg and Mogyorodi, 2024)","""A test automation approach in which inputs to the test object are recorded during manual testing to generate automated test scripts that can be executed later"" (Hamburg and Mogyorodi, 2024)","Automated Testing (IEEE, 2022, pp. 22, 35; Hamburg and Mogyorodi, 2024)","Capture/Playback, Capture/Replay, Record/Playback (Hamburg and Mogyorodi, 2024)",
Cause-Effect Graphing,"Technique (IEEE, 2022, pp. 2, 22; Washizaki, 2024, p. 5-11)","Testing ""based on exercising decision rules in a cause-effect graph"" (IEEE, 2022, p. 2)","Specification-based Testing (Washizaki, 2024, p. 5-11; IEEE, 2022, p. 22)",,"Related to decision table testing (Washizaki, 2024, p. 5-11)"
Certification,Approach,"The ""process of confirming that a system or component complies with its specified requirements and is acceptable for operational use"" (IEEE, 2017, p. 63; similar in Hamburg and Mogyorodi, 2024); usually done by a third-party (IEEE, 2017, p. 63; OG ISO/IEC 2015)",,,
Change-Related Testing,Approach,"""Testing initiated by modification to a component or system"" (Hamburg and Mogyorodi, 2024)",,,
Checklist-based Reviews,"Approach; Technique? (Hamburg and Mogyorodi, 2024)","""Review[s] … guided by a list of questions or required attributes"" (Hamburg and Mogyorodi, 2024)",Checklist-based Testing; Reviews,,See ISO 20246
Checklist-based Testing,"Practice (IEEE, 2022, p. 34); Technique? (Hamburg and Mogyorodi, 2024)","Testing generated ""based on a list of pre-determined items"" that ""can be based on personal experience, commonly found defects, and perceived risks"" (IEEE, 2022, p. 34)","Experience-based Testing (IEEE, 2022, p. 34; Hamburg and Mogyorodi, 2024)","Checklist Analysis? (IEEE, 2017, p. 67)","""Often focused on a particular quality characteristic"" (IEEE, 2022, p. 34). See also Patton, 2006, pp. 61, 99-103"
Classification Tree Method,"Technique (IEEE, 2022, p. 22; Hamburg and Mogyorodi, 2024)","Testing ""designed using a classification tree"" (Hamburg and Mogyorodi, 2024; OG Grochtmann)","Specification-based Testing (IEEE, 2022, p. 22; Hamburg and Mogyorodi, 2024)","Classification Tree Technique (Hamburg and Mogyorodi, 2024)","Related to combinatorial testing (Hamburg and Mogyorodi, 2024)"
Code Reviews,Approach,"A ""meeting at which software code is presented to project personnel, managers, users, customers, or other interested parties for comment or approval"" (IEEE, 2017, p. 74); can also be done ""using a pull request technique/tool … before [the code] can be merged into [the] project"" (Washizaki, 2024, p. 12-13)","Reviews (Washizaki, 2024, p. 12-13), Peer Reviews (sometimes) (Washizaki, 2024, p. 12-13), Static Analysis? (Washizaki, 2024, p. 12-13)",,"Sometimes kept separate from testing (Washizaki, 2024, p. 12-11). Seems to line up most closely with the notion of ""peer review"" from Patton (2006, p. 94) and van Vliet (2000, p. 414)"
Co-existence Testing (sometimes without hyphen; see Hamburg and Mogyorodi (2024)),"Type (inferred from compatibility and interoperability testing and implied by its quality (ISO/IEC, 2023a))","""Testing that measures the degree to which a test item can function satisfactorily alongside other independent products in a shared environment"" (IEEE, 2022, p. 3; similar in ISO/IEC, 2023a) ""without a negative impact on any of them"" (Hamburg and Mogyorodi, 2024; similar in ISO/IEC, 2023a)","Compatibility Testing (IEEE, 2022, p. 3; ISO/IEC, 2023a)",,"Testing approach not mentioned explicitly by IEEE (2022), Hamburg and Mogyorodi (2024), or ISO/IEC (2023a). Related to portability testing (Hamburg and Mogyorodi, 2024)"
Combinatorial Testing,"Technique (IEEE, 2022, pp. 3, 22; Washizaki, 2024, p. 5-11; Hamburg and Mogyorodi, 2024)","Testing that ""systematically derive[s] … test cases that cover specific parameters of values or conditions"" (Washizaki, 2024, p. 5-11) by choosing ""specific combinations of values"" (Hamburg and Mogyorodi, 2024)","Specification-based Testing (IEEE, 2022, pp. 3, 22; Washizaki, 2024, p. 5-11; Hamburg and Mogyorodi, 2024)","Combinatorial Test Design Techniques (IEEE, 2022, p. 3) (a little redundant)","Related to the classification tree method (Hamburg and Mogyorodi, 2024). See also Engström and Petersen, 2015"
Compatibility Testing,"Type (IEEE, 2022, pp. 3, 22; 2013, p. 2; implied by its quality (ISO/IEC, 2023a))","""Testing that measures the degree to which a test item can function satisfactorily alongside other independent products in a shared environment (co-existence), and where necessary, exchanges information with other systems or components (interoperability)"" (IEEE, 2022, p. 3; 2013, p. 2; similar in ISO/IEC, 2023a and Hamburg and Mogyorodi, 2024)","Non-functional Testing (Washizaki, 2024, p. 5-9)",,"Not atomic and implies the existence of ""co-existence testing"" and ""interoperability testing"", which is made more explicit by ISO/IEC (2023a). Includes both ""different hardware and software facilities"" and ""different versions or releases"" (Washizaki, 2024, p. 5-9). Likely has two subtypes: ""downward compatibility testing"" (implied by IEEE, 2017, p. 147) and ""upward compatibility testing"" (implied by IEEE, 2017, p. 492)"
Compliance Testing,"Type (implied by its quality (IEEE, 2017, p. 82; Hamburg and Mogyorodi, 2024))","Testing used ""to determine the"" ""adherance of [the test item] … to standards, conventions or regulations in laws and similar prescriptions"" (Hamburg and Mogyorodi, 2024; OG IREB Glossary) usually ""forced by an external regulatory body"" (Washizaki, 2024, p. 5-8)",,,"""Audits are often used to verify compliance with standards"" (IEEE, 2022, p. 44)"
Component Integration Testing,"Level (IEEE, 2017, p. 467; inferred from integration testing)","""Testing of groups of related components"" (IEEE, 2017, p. 82) or ""integration testing of components"" (Hamburg and Mogyorodi, 2024)","Integration Testing (Hamburg and Mogyorodi, 2024)","Module Integration Testing, Unit Integration Testing (Hamburg and Mogyorodi, 2024)","Difference between this, integration testing, and unit testing?"
Command-Line Interface (CLI) Testing,Approach,"""Testing performed by submitting commands to the software under test using a dedicated command-line interface"" (Hamburg and Mogyorodi, 2024)",Manual Testing?,,
Concurrency Testing,Approach,"""Testing to evaluate if a component or system involving concurrency behaves as specified"" (Hamburg and Mogyorodi, 2024)",,,
Condition Testing,"Technique (Hamburg and Mogyorodi, 2024)","Testing ""in which test conditions are outcomes of atomic conditions"" (Hamburg and Mogyorodi, 2024)","Structure-based Testing (Hamburg and Mogyorodi, 2024); Decision Testing?","Decision Testing (Washizaki, 2024, p. 5-13)","Hamburg and Mogyorodi (2024) make the distinction that this only involves atomic conditions, but Washizaki (2024, p. 5-13) doesn't, considering these two terms to be synonyms"
Configuration Testing,Approach,"Testing that ""verifies the software under specified configurations"" (Washizaki, 2024, p. 5-10), or ""arrangement[s] … defined by … its constituent parts[,] … requirements, design, and[/or] implementation"" (IEEE, 2017, p. 90), when it ""is built to serve different users"" (Washizaki, 2024, p. 5-10)",,,"Can be done by an audit (IEEE, 2017, p. 90)"
Construction Testing,Approach,"Testing that ""aims to reduce the gap between when faults are inserted into the code and when those faults are detected, thereby reducing the cost incurred to fix them"" (Washizaki, 2024, p. 4-7)",,,"""Involves two forms of testing, which are often performed by the software engineer who wrote the code: unit testing and integration testing"", but not ""more specialized testing"" (Washizaki, 2024, p. 4-7). IEEE (2017, p. 95) defines a process just called ""construction"" that includes unit testing (but not integration testing). See also IEEE Standard 829-1998 and IEEE Standard 1008-1987"
Continuous Testing,"Practice (Washizaki, 2024, p. 6-13); Approach (Hamburg and Mogyorodi, 2024)","Testing ""started via an automated process that can occur on-demand"" (IEEE, 2022, p. 35) ""that involves testing the software at every stage of the software development life cycle"" (Washizaki, 2024, p. 6-13) ""to obtain feedback … as rapidly as possible"" (Hamburg and Mogyorodi, 2024)","Automated Testing (IEEE, 2022, p. 35; Hamburg and Mogyorodi, 2024)",,"Involves testing early (IEEE, 2022, p. 35; Washizaki, 2024, p. 6-13; Hamburg and Mogyorodi, 2024), often (Washizaki, 2024, p. 6-13; Hamburg and Mogyorodi, 2024), and everywhere (Hamburg and Mogyorodi, 2024), and ideally employs ""prioritization"", the process of ""defin[ing] a test execution order according to some criteria"" (Washizaki, 2024, p. 5-4), so that time isn't wasted on lower priority tests"
Contractual Acceptance Testing,Level (inferred from acceptance testing),"""Acceptance testing performed to verify whether a system satisfies its contractual requirements"" (Hamburg and Mogyorodi, 2024)","Acceptance Testing (Hamburg and Mogyorodi, 2024)",,
Control Flow Analysis,Approach,"""Analysis based on a representation of unique paths for executing a component or system"" (Hamburg and Mogyorodi, 2024)","Static Analysis (Hamburg and Mogyorodi, 2024)",,
Control Flow Testing,"Technique (Washizaki, 2024, p. 5-13)","Testing that ""covers all"" of a particular subdivision of code (Washizaki, 2024, p. 5-13), namely the ""sequence in which operations are performed during … execution"" (IEEE, 2017, p. 101; OG IEEE, 2015)","Structure-based Testing (Washizaki, 2024, p. 5-13)",,"""The adequacy of such tests is measured in percentages"" and can also be performed on ""blocks of statements[] or specific combinations of statements"" (Washizaki, 2024, p. 5-13); would these be a different testing type? Related to data flow testing? (IEEE, 2017, p. 101)"
Conversion Testing,"Type (IEEE, 2022, p. 22)","Testing that verifies that the software can be modified ""to enable it to operate with similar functional capability in a different environment"" (IEEE, 2017, p. 103)",Portability Testing?,,
Crowd Testing,"Approach (Hamburg and Mogyorodi, 2024)","Testing performed by ""a large group of testers"" (Hamburg and Mogyorodi, 2024)",,,
Dark Launches,"Technique (Washizaki, 2024, p. 6-5)",,,,"A method for ""testing the software in the production system context"" which ""can be particularly challenging"" (Washizaki, 2024, p. 6-5)"
Data Flow Analysis,Approach,"""Analysis based on the lifecycle of variables"" (Hamburg and Mogyorodi, 2024)","Static Analysis (Hamburg and Mogyorodi, 2024)",,
Data Flow Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, p. 22)","Control flow testing with additional ""information about how the variables are defined, used, and killed"" (Washizaki, 2024, p. 5-13)","Structure-based Testing (IEEE, 2022, p. 22), Control Flow Testing? (Washizaki, 2024, p. 5-13)",,"May involve data flow analysis or ""data analysis"". Related to control flow testing? (IEEE, 2017, p. 101). See also IEEE (2017, p. 166), Patton (2006, p. 114) and van Vliet (2000, pp. 424-425)"
Data-driven Testing,"Practice (IEEE, 2022, p. 22)","Testing ""that uses data files to contain the test data and expected results needed to execute the test scripts"" (Hamburg and Mogyorodi, 2024)","Automated Testing (IEEE, 2022, pp. 22, 35; implied by Hamburg and Mogyorodi, 2024)",,"Similar to keyword-driven testing (Hamburg and Mogyorodi, 2024)"
Decision Table Testing,"Technique (IEEE, 2022, pp. 4, 22; Washizaki, 2024, p. 5-11; Hamburg and Mogyorodi, 2024)","Testing ""based on exercising decision rules in a decision table"" (IEEE, 2022, p. 4; similar in Hamburg and Mogyorodi, 2024) ""by considering every possible combination of conditions and their corresponding resultant actions"" (Washizaki, 2024, p. 5-11)","Specification-based Testing (IEEE, 2022, pp. 4, 22; Washizaki, 2024, p. 5-11; Hamburg and Mogyorodi, 2024), Model-based Testing (Bourque and Fairley, 2014, p. 4-10)",,"Related to cause-effect graphing (Washizaki, 2024, p. 5-11). See also Peters and Pedrycz (2000, pp. 448, 450-453)"
Decision Testing,"Technique (IEEE, 2022, pp. 4, 22; Washizaki, 2024, p. 5-13; Hamburg and Mogyorodi, 2024)","Testing ""based on exercising decision outcomes in the control flow of the test item"" (IEEE, 2022, p. 4; similar in Hamburg and Mogyorodi, 2024)","Control Flow Testing (Washizaki, 2024, p. 5-13), Structure-based Testing (IEEE, 2022, pp. 4, 22; Hamburg and Mogyorodi, 2024)","Condition Testing (Washizaki, 2024, p. 5-13)",
Defect-based Testing,"Technique (Hamburg and Mogyorodi, 2024)","Testing ""in which test cases are developed from what is known about a specific defect type"" (Hamburg and Mogyorodi, 2024)",Fault-Based Testing?,,"Related to the idea of a ""defect taxonomy"" (Hamburg and Mogyorodi, 2024)"
Desk Checking,"Technique (IEEE, 2017, p. 133)","A ""manual simulation of program execution"" or visual examination of code listings, test results, or other documentation to ""detect faults"" and "" identify errors"" (IEEE, 2017, p. 133; OG ISO/IEC 2015)",,,"Related to inspections and walkthroughs (IEEE, 2017, p. 133)"
Deterministic Testing?,"Technique? (implied by Washizaki, 2024, p. 5-16)",,,,"In contrast to random testing; it is unclear if this is an actual test approach or simply a method for selecting input data, etc. for tests (Washizaki, 2024, p. 5-16)"
Development Testing,Level?,"""Testing conducted during the development of a system or component, usually in the development environment by the developer … to establish whether … [it] satisfies its criteria"" (IEEE, 2017, p. 136)",,,"The secondary definition, ""testing conducted to establish whether a new software product or software‐based system (or components of it) satisfies its criteria"" (IEEE, 2017, p. 136), seems to overlap with acceptance testing"
Device-based Testing,Practice?,"""Testing in which test suites are executed on physical or virtual devices"" (Hamburg and Mogyorodi, 2024)",,,
"Disaster/Recovery Testing (or Disaster Recovery Testing (implied by Washizaki, 2024, p. 6-8; IEEE, 2013, p. 20))","Type (IEEE, 2022, p. 22)","Testing to determine the degree to which a system can ""return to normal operation after a hardware or software failure "" (IEEE, 2017, p. 140)",,,"""Requires stopping the service, identifying the checkpoint state and triggering the failover process""; ""should be constantly rehearsed as changes to the production environment are made"" (Washizaki, 2024, p. 6-8). Difference between this and recovery testing (in the context of performance)?"
Dynamic Testing,Approach,"""Testing in which a test item is evaluated by executing it"" (IEEE, 2022, p. 4)",,"Dynamic Analysis? (IEEE, 2017, p. 149)","Can ""only occur in the parts of the life cycle when executable code is available"" (IEEE, 2022, p. 18)"
Each Choice Testing,"Technique (IEEE, 2022, p. 22)",,"Combinatorial Testing (IEEE, 2022, p. 22)",,
Elasticity Testing,Approach,"Testing that ""assesses the ability of the SUT … to rapidly expand or shrink compute, memory, and storage resources without compromising the capacity to meet peak utilization"" (Washizaki, 2024, p. 5-9)","Non-functional Testing (Washizaki, 2024, p. 5-9)",,"Some objectives are ""to control behaviors, to identify the resources to be (un)allocated, to coordinate events in parallel, and to evaluate scalability"" (Washizaki, 2024, p. 5-9); the last one seems like it should be under scalability testing?"
End-to-end Testing,"Level?, Type (Hamburg and Mogyorodi, 2024)","Testing ""in which business processes are tested from start to finish under production-like circumstances"" (Hamburg and Mogyorodi, 2024)",Operational (Acceptance) Testing?,"E2E Testing (Hamburg and Mogyorodi, 2024)",Ambiguous: does this test the business processes or the system?
Endurance Testing,"Type (IEEE, 2013, p. 2)","""Testing conducted to evaluate whether a test item can sustain a required load [""significant"" (Hamburg and Mogyorodi, 2024)] continuously for a specified period of time"" (IEEE, 2013, p. 2; similar in Hamburg and Mogyorodi, 2024) ""within the system's operational context"" (Hamburg and Mogyorodi, 2024)","Performance Efficiency Testing (IEEE, 2013, p. 2)",,
Equivalence Partitioning,"Technique (IEEE, 2022, pp. 4, 20, 22; 2013, p. 3; Washizaki, 2024, p. 5-11)","Testing ""designed to exercise equivalence partitions by using one or more representative members of each partition"" (IEEE, 2022, p. 4; 2013, p. 3) ""based on a specified criterion or relation"" to create ""a representative test suite"" (Washizaki, 2024, p. 5-11)","Specification-based Testing (IEEE, 2022, p. 22; Washizaki, 2024, p. 5-11), Functional Testing? (IEEE, 2022, p. 20)","Equivalence Classing (although this sometimes has a bit different of a definition; see IEEE, 2017, p. 164) (Patton, 2006, p. 67; implied by IEEE, 2022, p. 4), Partition Testing (Hamburg and Mogyorodi, 2024)",
Ergonomics Testing,Approach,"""Testing to determine whether a component or system and its input devices are being used properly with correct posture"" (Hamburg and Mogyorodi, 2024)",,,Does this test the system or its use?
Error Guessing,"Technique (IEEE, 2022, pp. 4, 22, 34; 2013, p. 3; Washizaki, 2024, p. 5-13)","Testing based on ""the tester's knowledge of past failures, or general knowledge of failure modes"" (IEEE, 2022, p. 4; 2013, p. 3) ""to anticipate the most plausible faults in each SUT"" (Washizaki, 2024, p. 5-13)","Experience-based Testing (IEEE, 2022, pp. 4, 22; Washizaki, 2024, p. 5-13), Fault-based Testing (Bourque and Fairley, 2014, p. 4-9)",,"See Patton (2006, pp. 88-89)"
Error Seeding,Practice?,"The ""process of intentionally adding known faults to those already in a computer program … [to] estimat[e] the number of faults remaining"" (IEEE, 2017, p. 165)",,"Fault Seeding (IEEE, 2017, p. 165; van Vliet, 2000, p. 427), Bug Seeding (IEEE, 2017, p. 165), Bebugging (Hamburg and Mogyorodi, 2024)","See van Vliet (2000, pp. 427-428)"
Evidence-based Testing,"Technique (Washizaki, 2024, p. 5-12)","Testing that ""follows a rigorous research approach"", including ""identifying"" and ""critically analyzing the evidence in light of the problem"" (Washizaki, 2024, p. 5-12)","Specification-based Testing (Washizaki, 2024, p. 5-12)",,"""Evidence-based software engineering (EBSE) … is the _best_ solution for a practical problem"" (Washizaki, 2024, p. 5-12); related to experience-based testing?"
Exhaustive Testing ,"Approach (IEEE, 2022, p. 4; Hamburg and Mogyorodi, 2024)","Testing ""in which all combinations of input values and preconditions are tested"" (IEEE, 2022, p. 4; similar to Hamburg and Mogyorodi, 2024)","Dynamic Testing (IEEE, 2022, p. 18)","Complete Testing (Hamburg and Mogyorodi, 2024)","Impossible in most non-trivial situations (IEEE, 2022, p. 4; Washizaki, 2024, p. 5-5; van Vliet, 2000, p. 421; Peters and Pedrycz, 2000, pp. 439, 461)"
Experience-based Testing,"Technique (IEEE, 2022, pp. 4, 22; Washizaki, 2024, p. 5-13; Hamburg and Mogyorodi, 2024), Practice (IEEE, 2022, p. 22)","Testing based on testers' experience (IEEE, 2022, p. 4; Hamburg and Mogyorodi, 2024), knowledge, and intuition (Washizaki, 2024, p. 5-13; Hamburg and Mogyorodi, 2024), as well as the SUT's context (Washizaki, 2024, p. 5-13)","Dynamic Testing (IEEE, 2022, p. 17), Unscripted Testing (often) (IEEE, 2022, p. 34)",,"""Can include concepts such as test attacks, tours, and error taxonomies"" (IEEE, 2022, p. 4). See Patton (2006, pp. 88-89)"
Expert Usability Reviews,Approach,"""Informal usability review[s] in which the reviewers are … usability experts [and/]or subject matter experts"" (Hamburg and Mogyorodi, 2024)","Informal Testing, Usability Testing, Reviews (Hamburg and Mogyorodi, 2024)",,
Exploratory Testing,"Technique (Washizaki, 2024, p. 5-14; inferred from experience-based testing), Practice (IEEE, 2022, pp. 20, 22, 34)","""Simultaneous learning, test design and test execution"" (Washizaki, 2024, p. 5-14; similar in Hamburg and Mogyorodi, 2024) that is ""spontaneous"" and aims to find ""hidden properties"" that ""can interfere with other properties of the software under test"" (IEEE, 2022, p. 5; 2013, p. 3)","Experience-based Testing (IEEE, 2022, p. 5; 2013, p. 3; Washizaki, 2024, p. 5-14); Unscripted Testing (IEEE, 2022, p. 33; 2017, p. 174; implied by Washizaki, 2024, p. 5-14)",,"""Test cases are not defined in advance but are dynamically designed, executed, and modified according to the collected evidence"" (Washizaki, 2024, p. 5-14), but this process is often structured with ""session sheets"", which are also ""used to capture information about what was tested, and any anomalous behaviour observed"" (2022, p. 33), or ""test charters"" (Hamburg and Mogyorodi, 2024). Patton says this is used when a specification is not available to determine and test the software's features (2006, p. 65). ""Widely used in shift-left development (such as Agile)"" (Washizaki, 2024, p. 5-14). See Whittaker (2010)"
Extended Entry Table Testing,Technique (inferred from decision table testing),"Testing ""based on exercising decision rules"" (IEEE, 2022, p. 4) in an extended entry table (IEEE, 2017, p. 175; OG ISO, 1984)","Decision Table Testing (IEEE, 2017, p. 175; OG ISO, 1984)",,
Factory Acceptance Testing,"Level (IEEE, 2022, p. 22)",,"Acceptance Testing (IEEE, 2022, p. 22)",,
Failover Testing,Approach,"Testing that ""validates the SUT’s ability to manage heavy loads or unexpected failure to continue typical operations"" (Washizaki, 2024, p. 5-9) by entering a ""backup operational mode in which [these responsibilities] … are assumed by a secondary system"" (Hamburg and Mogyorodi, 2024)","Non-functional Testing (Washizaki, 2024, p. 5-9)",,"Can be done by ""allocating extra resources"" (Washizaki, 2024, p. 5-9) and ""should be constantly rehearsed as changes to the production environment are made"" (Washizaki, 2024, p. 6-8). Related to recoverability validation (Washizaki, 2024, p. 5-9)"
"Fault Injection Testing (IEEE, 2022, p. 42)",Approach,"Testing where ""faults are artificially introduced into the SUT"" (Washizaki, 2024, p. 5-18) to, at least partially, ""test the robustness of the system in the event of internal and external failures"" (IEEE, 2022, p. 42) and ""whether it can detect and possibly recover from [them]"" (Hamburg and Mogyorodi, 2024)","Robustness Testing (IEEE, 2022, p. 42)",,
Fault Tree Analysis,"Technique? (Hamburg and Mogyorodi, 2024)","""A technique for analyzing the causes of failures that uses a hierarchical model of events and their logical relationships"" (Hamburg and Mogyorodi, 2024)",Static Analysis,,
Fault-Based Testing,"Technique (Washizaki, 2024, p. 5-14)","Testing that ""devise[s] test cases specifically to reveal likely or predefined fault categories"" (Washizaki, 2024, p. 5-14)",,,
Field Testing,Approach,"""Testing conducted to evaluate the system behavior under productive connectivity conditions in the field"" (Hamburg and Mogyorodi, 2024)",Operational (Acceptance) Testing?,Operational (Acceptance) Testing?,
Forcing Exception Testing,"Technique (Washizaki, 2024, p. 5-12)","Testing that ""check[s] whether the SUT can manage a predefined set of exceptions/errors"" (Washizaki, 2024, p. 5-12)","Scenario-based Testing? (Washizaki, 2024, p. 5-13)",,"Related to the ""test-to-fail"" approach (Patton, 2006, pp. 66-67)"
Formal Reviews,Approach,"""Review[s] that follow[] … defined process[es] with … formally documented output[s]"" (Hamburg and Mogyorodi, 2024)","Reviews (Washizaki, 2024, p. 12-14; Hamburg and Mogyorodi, 2024), Formal Testing?",,See ISO 20246
Formal Testing,Approach,"""Testing conducted in accordance with test plans and procedures that have been reviewed and approved"" (IEEE, 2017, p. 188)",,,"Since informal testing still follows ""test plans and procedures"" (IEEE, 2017, p. 220), this is probably not related to scripted testing (at least specifically)"
"Functional Suitability Testing (mentioned by IEEE (2022, p. 7); implied by its quality (ISO/IEC, 2023a))",Approach?,"Testing to determine the ""capability of a product to provide functions that meet stated and implied needs of intended users when it is used under specified conditions"" (ISO/IEC, 2023a)",,"Functionality Testing? (implied by Hamburg and Mogyorodi, 2024)","This includes meeting ""the functional specification"" (ISO/IEC, 2023a), but originally explicitly didn't (2011). Difference between this and functional testing?"
Functional Testing,"Type (IEEE, 2022, pp. 15, 20, 22; implied by the quality of ""correctness"" (IEEE, 2017, p. 104; Washizaki, 2024, p. 3-13))","Testing ""used to check the implementation of functional requirements"" (IEEE, 2022, p. 21), which ""identif[y] what results a product or process shall produce"" (IEEE, 2017, p. 195) based on software algorithms that support work tasks (p. 422), and ""to verify that the SUT conforms to standards, rules, specifications, requirements, design, processes, or practices"" (Washizaki, 2024, p. 5-7)",Functional Suitability Testing?,"Conformance Testing, Correctness Testing (Washizaki, 2024, p. 5-7)",
Functional Testing,Technique (inferred from specification-based testing),"""Testing that … focuses solely on the outputs generated in response to selected inputs and execution conditions"" or that ""evaluate[s] the compliance of a system or component with specified functional requirements"" (IEEE, 2017, p. 196) which ""identif[y] what results"" (IEEE, 2017, p. 195) or ""observable behaviours that the software is to provide (Washizaki, 2024, p. 1-4)",,"Specification-based Testing (IEEE, 2017, p. 196; van Vliet, 2000, p. 399)","Difference between this and specification-based testing (IEEE, 2017, p. 196; van Vliet, 2000, p. 399; Souza et al., 2017, p. 3)?"
Fuzz Testing,"Technique (IEEE, 2022, p. 36; Hamburg and Mogyorodi, 2024), Practice? (inferred from mathematical-based testing)","Testing where ""high volumes of random (or near random) data, called fuzz, are used to generate [test] inputs"" (IEEE, 2022, p. 5; similar in Hamburg and Mogyorodi, 2024) ""aimed at breaking the software"" (Bourque and Fairley, 2014, p. 4-8) or ""discover[ing] security vulnerabilities"" (Hamburg and Mogyorodi, 2024)","Mathematical-based Testing (IEEE, 2022, p. 36), Security Testing (Hamburg and Mogyorodi, 2024), Random Testing (Bourque and Fairley, 2014, p. 4-8; implied by IEEE, 2022, p. 5; Hamburg and Mogyorodi, 2024)","Fuzzing (Hamburg and Mogyorodi, 2024)","Often used for security testing (Bourque and Fairley, 2014, p. 4-8). This is tagged (?) as ""artificial intelligence"" (IEEE, 2022, p. 5), but I don't think AI is required"
GUI Testing,Approach,"""Testing performed by interacting with the software under test via the graphical user interface"" (Hamburg and Mogyorodi, 2024)",Dynamic Testing,,
Heuristic Evaluation,"Technique (Hamburg and Mogyorodi, 2024)","""Usability review[s] … that evaluate[] a work product by using a set of heuristics"" (Hamburg and Mogyorodi, 2024)","Usability Reviews (Hamburg and Mogyorodi, 2024)",,
High-Level Testing,Approach,"Testing ""with concrete values for preconditions, input data, expected results, postconditions, and a detailed description of actions (where applicable)"" (Hamburg and Mogyorodi, 2024)",,,"OG definition was about test cases, not a test approach"
Hypothesis Testing,Approach,"""Validation of a theory and its assumptions using sample data"" (Hamburg and Mogyorodi, 2024)",,,"Ambiguous: what is a ""theory""? why use ""sample data"" and not just ""data""? is it specific to software or does it just refer to general science? Potentially related to model verification"
Informal Reviews,Approach,"""Review[s] that do[] not follow a defined process and ha[ve] no formally documented output"" (Hamburg and Mogyorodi, 2024)","Reviews (Washizaki, 2024, p. 12-14; Hamburg and Mogyorodi, 2024), Informal Testing",,
Informal Testing,Approach,"""Testing conducted in accordance with test plans and procedures that have not been reviewed and approved by a customer, user, or designated level of management"" (IEEE, 2017, p. 220)",,,
Infrastructure Testing,Approach,"Testing of ""infrastructure components to reduce the chances of downtime and improve the performance of the IT infrastructure"" (Washizaki, 2024, p. 5-9)","Non-functional Testing (Washizaki, 2024, p. 5-9)",,
Input Data Testing,"Level (Hamburg and Mogyorodi, 2024)","Testing ""that focuses on the quality of the data used for training and prediction by ML models"" (Hamburg and Mogyorodi, 2024)",ML Model Testing,,
Insourced Testing,Practice?,"""Testing performed by people who are co-located with the project team but are not fellow employees"" (Hamburg and Mogyorodi, 2024)",,,
(Code) Inspections,"Technique (IEEE, 2017, p. 227)","""Visual examination[s] of … [code] to detect and identify software anomalies, including errors and deviations from standards and specifications"" (IEEE, 2017, p. 227; OG IEEE, 2008) that are ""led by impartial facilitators who are trained in inspection techniques"" (IEEE, 2017, p. 227) and ""use[] defined team roles and measurement"" (Hamburg and Mogyorodi, 2024)","Formal Review (Hamburg and Mogyorodi, 2024), Static Analysis (IEEE, 2017, p. 227), Static Testing? (IEEE, 2017, p. 227)",,"Related to peer reviews (Hamburg and Mogyorodi, 2024). See ISO 20246"
Installability Testing,"Type (IEEE, 2022, p. 22; 2017, p. 228; implied by its quality)","""Testing conducted to evaluate whether … test items can be installed [and/or uninstalled (ISO/IEC, 2023a)] as required in all specified environments"" (IEEE, 2017, p. 228; OG IEEE, 2013) or a specific one (ISO/IEC, 2023a)","Portability Testing (ISO/IEC, 2023a; IEEE, 2017, p. 228); Replaceability Testing? (ISO/IEC, 2023a)",,
Installation Testing,"Level (Peters and Pedrycz, 2000, p. 445; implied by Washizaki, 2024, p. 5-8)","""System testing conducted in the operational environment of hardware configurations and other operational constraints""; may also verify installation procedures (Washizaki, 2024, p. 5-8)",Online Testing?,,"""Typically observe[s] the newly started server for a while, ensuring that the server doesn’t crash or otherwise misbehave"" (Washizaki, 2024, p. 6-10)"
Integration Testing,"Level (IEEE, 2022, pp. 12, 20-22, 26-27; Washizaki, 2024, p. 5-7; Hamburg and Mogyorodi, 2024)","Testing that ""verifies the interactions among SUT elements (for instance, components, modules, or subsystems)"" as well as ""external interfaces"" (Washizaki, 2024, p. 5-7) in a ""progressive"" manner (IEEE, 2017, p. 231)","Construction Testing (Washizaki, 2024, p. 4-7)",,"More effective when automated (Washizaki, 2024, p. 7-14) and ""can be performed at each development stage"" (Washizaki, 2024, p. 5-7). IEEE (2017, p. 231) says it can be used when integrating systems; is this captured by ""subsystems"" in the SWEBOK definition?  Difference between this and component integration testing? See also (Patton, 2006, p. 109)"
Interface Testing,"Level (implied by IEEE, 2017, p. 235 and integration testing)","Testing that ""aims to verify whether the components' interface provides the correct exchange of data and control information"" (Washizaki, 2024, p. 5-10; similar in IEEE, 2017, p. 235)","Integration Testing (Hamburg and Mogyorodi, 2024)",,"""Usually, the test cases are generated from the interface specification"" (Washizaki, 2024, p. 5-10)"
Interoperability Testing,"Type (IEEE, 2022, p. 22; implied by its quality (ISO/IEC, 2023a))","Testing that aims to evaluate the ""capability of a product to exchange information with other products [or ""systems of different types"" (IEEE, 2017, p. 238)] and mutually use the information that has been exchanged"" (ISO/IEC, 2023a) or that ""a modified system retains [this] capability"" (IEEE, 2017, p. 238)","Compatibility Testing (IEEE, 2022, p. 3; ISO/IEC, 2023a)",,"Originally defined in the context of ""two or more systems, products or components"" (ISO/IEC, 2011). See ""passive interconnection"" (IEEE, 2017, p. 315; OG IEEE, 2006) potentially?"
Keyword-driven Testing,"Approach, Technique? (Hamburg and Mogyorodi, 2024)","Testing that uses ""test scripts … [with] high-level keywords and supporting files that contain low-level scripts that implement those keywords"" (Hamburg and Mogyorodi, 2024)","Scripted Testing (Hamburg and Mogyorodi, 2024), Automated Testing (IEEE, 2022, p. 35)","Action Word-driven Testing (Hamburg and Mogyorodi, 2024)","Similar to data-driven testing (Hamburg and Mogyorodi, 2024). See also ISO/IEC/IEEE 29119-5"
License Compliance Audits,Practice? (inferred from audits),"""Audit[s] that reconcile[] license‐related information from multiple information sources, such as entitlement consumption against entitlement rights"" (IEEE, 2017, p. 250)","Audits (IEEE, 2017, p. 250)",,
Linear Scripting,Practice (implied by Scripted Testing),"Scripted testing ""without any control structure in the test scripts"" (Hamburg and Mogyorodi, 2024)","Scripted Testing (Hamburg and Mogyorodi, 2024)",Linear(ly) Scripted Testing?,
"Load Balancing Testing (implied by Washizaki, 2024, p. 6-5)",,,,,"May be done by ""us[ing] infrastructure/operations services"" early on in the development process (Washizaki, 2024, p. 6-5)"
Load Testing,"Type (IEEE, 2022, pp. 5, 20, 22; 2017, p. 253; OG IEEE 2013; Hamburg and Mogyorodi, 2024)","Testing ""conducted to evaluate the behaviour of a test item under anticipated conditions of varying load"" (IEEE, 2022, p. 5; 2017, p. 253; OG IEEE 2013; similar in Hamburg and Mogyorodi, 2024)","Non-functional Testing (Washizaki, 2024, p. 5-9); Performance Testing (IEEE, 2022, p. 5; Hamburg and Mogyorodi, 2024), Performance-related Testing (IEEE, 2022, p. 22), Performance Efficiency Testing (IEEE, 2017, p. 253; OG IEEE 2013)",,"Loads used are ""usually between anticipated conditions of low, typical, and peak usage"" (IEEE, 2022, p. 5; 2017, p. 253; OG IEEE 2013; Hamburg and Mogyorodi, 2024); this may be aided by load generation and/or management (see Hamburg and Mogyorodi, 2024). Patton defines this as running the software with as large of a load as possible (2006, p. 86), and Washizaki (2024, p. 5-9) seems to imply something similar; going past this ""limit"" is the realm of ""stress testing"" (Washizaki, 2024, p. 5-9). Seeks to ""discover problems … or reliability, stability, or robustness violations"" (Washizaki, 2024, p. 5-9). Good to use if the software may have ""a large number of concurrent users"" (IEEE, 2022, p. 45). See ISO 29119-1"
Localization Testing,"Type (IEEE, 2022, p. 22)","Testing ""a national or specific regional version of a product"" (IEEE, 2017, p. 253; OG ISO/IEC 2008) to ensure it is ""suitable for a specific user group"" (Hamburg and Mogyorodi, 2024)?",,,"Localization is related to internationalization (testing?), but can be done ""separately from the translation process"" (IEEE, 2017, p. 254)"
Loopback Testing,Practice?,"""Testing in which signals or data from a test device are input to a system or component, and results are returned to the test device for measurement or comparison"" (IEEE, 2017, p. 257)",,,"Related to ""mechanism loopback"" (IEEE, 2017, p. 270)?"
Low-Level Testing,Approach,"Testing ""with abstract preconditions, input data, expected results, postconditions, and actions (where applicable)"" (Hamburg and Mogyorodi, 2024)",,,"OG definition was about test cases, not a test approach"
Maintainability Testing,"Type (IEEE, 2022, pp. 5, 22; implied by its quality)","Testing ""conducted to evaluate the degree of effectiveness and efficiency with which a test item may be modified"" (IEEE, 2022, p. 5; similar in ISO/IEC, 2023a) ""by the intended maintainers"" (Hamburg and Mogyorodi, 2024), including through ""corrections, improvements or adaptation of the product to changes in environment, and in requirements and functional specifications"", as well as the ""installation of updates and upgrades"" (ISO/IEC, 2023a)",,,"Six categories: corrective, preventive, adaptive, additive, perfective, and emergency (Washizaki, 2024, p. 7-4; ""emergency"" added in ISO/IEC/IEEE 14764 and mentioned in IEEE, 2017, p. 156); these may be sub-approaches"
Maintenance Testing,Approach,"""Testing the changes to an operational system or the impact of a changed environment to an operational system"" (Hamburg and Mogyorodi, 2024)","Change-Related Testing?, Operational (Acceptance) Testing?",,Related to portability testing and/or retesting?
Malware Scanning,Approach,"The ""detect[ion] and remov[al of] malicious code received at an interface"" (Hamburg and Mogyorodi, 2024)","Static Analysis (Hamburg and Mogyorodi, 2024), Interface Testing (Hamburg and Mogyorodi, 2024)?",,
Manual Testing,"Practice (IEEE, 2022, p. 22)","""Humans performing tests by entering information into a test item and verifying the results"" (IEEE, 2022, p. 6)","Scripted Testing (IEEE, 2022, p. 33)",,"""Inefficient, error prone and non-scalable"" (Washizaki, 2024, p. 6-5)"
Mathematical-based Testing,"Practice (IEEE, 2022, pp. 22, 36)","Testing based on ""the test item's required behaviour, input space or output space"" when they ""can be described in sufficient detail"" (IEEE, 2022, p. 36)","Automatic Testing (usually) (IEEE, 2022, p. 36)",,"Related to computation error testing from Patton (2006, p. 101)? See also ISO/IEC/IEEE 29119-4"
MC/DC Testing,"Technique (IEEE, 2022, p. 6; Washizaki, 2024, p. 5-13; Hamburg and Mogyorodi, 2024)","Testing ""based on demonstrating that a single Boolean [atomic (Hamburg and Mogyorodi, 2024)] condition within a decision can independently affect the outcome of the decision"" (IEEE, 2022, p. 6; similar in Hamburg and Mogyorodi, 2024)","Control Flow Testing (Washizaki, 2024, p. 5-13), Structure-based Testing (IEEE, 2022, pp. 6, 22; Hamburg and Mogyorodi, 2024)","Modified Condition Decision Testing (IEEE, 2022, p. 6; Washizaki, 2024, p. 5-13; with slash in Hamburg and Mogyorodi, 2024), Condition Determination Testing, Modified Multiple Condition Testing (Hamburg and Mogyorodi, 2024)",
Metamorphic Testing,"Technique (IEEE, 2022, pp. 6, 22; Washizaki, 2024, p. 5-15; Hamburg and Mogyorodi, 2024)","Testing ""based on generating test cases based on existing test cases and metamorphic relations"" (IEEE, 2022, p. 6; similar in Hamburg and Mogyorodi, 2024)","Mutation Testing (Washizaki, 2024, p. 5-15), Specification-based Testing (IEEE, 2022, pp. 6, 22)","MT (Hamburg and Mogyorodi, 2024)","Metamorphic relations may be uncovered using regression analysis? Good to use when it is ""difficult to calculate expected results"" (IEEE, 2022, p. 45). See also Kanewala and Yueh Chen, 2019"
Mixed Entry Table Testing,Technique (inferred from decision table testing),"Testing ""based on exercising decision rules"" (IEEE, 2022, p. 4) in a mixed entry table (IEEE, 2017, p. 278; OG ISO, 1984)","Decision Table Testing (IEEE, 2017, p. 278; OG ISO, 1984)",,
ML Model Testing,"Level? (Hamburg and Mogyorodi, 2024)","Testing ""that focuses on the ability of an ML model to meet required ML functional performance criteria and non-functional criteria"" (Hamburg and Mogyorodi, 2024)",,,"""ML functional performance"" is defined in terms of ""the functional correctness of an ML system"" (Hamburg and Mogyorodi, 2024), which is ambiguous and/or incorrect"
Model Verification,Approach,,"Static Testing (IEEE, 2022, p. 17)",,
Model-based Testing,"Practice (IEEE, 2022, p. 22); Technique?","Testing that uses ""formal or semi-formal representations of the required behaviour of a … [test] item"" to ""generate test cases systematically and automatically"" at ""various levels of abstraction"" (IEEE, 2022, p. 32)","Mathematical-based Testing (IEEE, 2022, p. 36)","MBT (IEEE, 2022, p. 32; Hamburg and Mogyorodi, 2024)","Models ""vary in the degree of model formality"" (such as Agile, semiformal, and formal models) (Washizaki, 2024, p. 1-14). Good potential for automation/generation! See also Souza et al., 2017 (term used on p. 3) and Engström and Petersen, 2015"
Monkey Testing,"Technique (Washizaki, 2024, p. 5-14)","Testing using ""randomly generated test cases to cause the program to stop"" (Washizaki, 2024, p. 5-14)","Ad Hoc Testing (Washizaki, 2024, p. 5-14), Random Testing?, Fuzz Testing?",,Related to fuzz testing?
Multiplayer Testing,Approach,"""Testing to determine if many players can simultaneously interact with the … game world, … computer-controlled opponents, game servers, and … each other, [sic] as expected according to the game design"" (Hamburg and Mogyorodi, 2024)",,,"OG definition mentioned the ""casino game world"", but this can be generalized"
Multiple-Hit Decision Table Testing,Technique (inferred from decision table testing),"Testing ""based on exercising decision rules"" (IEEE, 2022, p. 4) in a multiple-hit decision table (IEEE, 2017, p. 285; OG ISO, 1984)","Decision Table Testing (IEEE, 2017, p. 285; OG ISO, 1984)",,
Mutation Testing,"Technique (Washizaki, 2024, p. 5-15); Methodology (IEEE, 2017, p. 286)","Testing where ""test cases are randomly generated … or … specifically designed"" to detect ""slightly modified version[s] of the SUT"" called ""mutants"" (Washizaki, 2024, p. 5-15) or ""program mutations"" (IEEE, 2017, p. 286)","Structure-based Testing (Washizaki, 2024, p. 5-15), Fault-based Testing (Bourque and Fairley, 2014, p. 4-9)",,"Assumes that ""that more complex but real faults will be found by looking for simple syntactic faults"" and requires ""many mutants … [to] be automatically generated and executed systematically""; can be used to assist fuzz and metamorphic testing (Washizaki, 2024, p. 5-15)"
Negative Testing,Approach,"""Testing a component or system in a way for which it was not intended to be used"" (Hamburg and Mogyorodi, 2024). ""The application of boundary value concepts to scenario testing""? (IEEE, 2022, p. 40)","Security Testing? (Washizaki, 2024, p. 5-9), Forcing Exception Testing? (Washizaki, 2024, p. 5-13), Boundary Value Analysis?, Scenario-based Testing? (IEEE, 2022, p. 40)","Invalid Testing, Dirty Testing (Hamburg and Mogyorodi, 2024)","""Negative test cases can be derived from the state and event combinations that do not appear"" in state models (Washizaki, 2024, p. 1-20)"
Neighborhood Integration Testing,Level (inferred from integration testing),"""Integration testing … [based on] the nodes that connect to a given node"" (Hamburg and Mogyorodi, 2024)","Integration Testing (Hamburg and Mogyorodi, 2024)",,"What does ""node"" mean in this context?"
Neuron Coverage (Testing)?,Approach,"Testing based on ""the coverage of activated neurons in the neural network for a set of tests"" (Hamburg and Mogyorodi, 2024)","ML Model Testing (implied by Hamburg and Mogyorodi, 2024)",,
"Non-functional Testing (Washizaki, 2024, p. 5-8)",Approach,"Testing that ""targets the validation of non-functional aspects (such as performance, [security,] usability, or reliability)"" (Washizaki, 2024, p. 5-8; IEEE, 2022, p. 21; similar in Hamburg and Mogyorodi, 2024) that tend to ""constrain the technologies to be used in the implementation"" (Washizaki, 2024, p. 1-4)",,,"Hundreds of subapproaches that can be ""performed at all test levels"" (Washizaki, 2024, p. 5-8). ""Nonfunctional requirements"" are also called ""performance attributes"" (IEEE, 2017, p. 293); what does this imply for the relationship between non-functional and performance testing? In constrast to functional testing (IEEE, 2022, p. 21)"
Offline Testing,Practice?,"Testing ""in an environment without external interaction"" (Washizaki, 2024, p. 5-6), or testing ""whereby test cases are generated into a repository for future execution"" (Hamburg and Mogyorodi, 2024)",,,"Sometimes spelled with a hyphen (""off-line""; Washizaki, 2024, p. 5-6)"
Online Testing,Practice?,"Testing that ""interacts with the real application environment"" (Washizaki, 2024, p. 5-6), or testing ""whereby test cases are generated and executed simultaneously"" (Hamburg and Mogyorodi, 2024)",,"On-the-Fly Testing (Hamburg and Mogyorodi, 2024)",
Operational (Acceptance) Testing,"Level (IEEE, 2022, p. 22, inferred from acceptance testing)","""Test[ing] to determine the correct installation, configuration and operation of a module and that it operates securely in the operational environment"" (ISO/IEC, 2018) or ""evaluate a system or component in its operational environment"" (IEEE, 2017, p. 303), particularly ""to determine if operations and/or systems administration staff can accept [it]"" (Hamburg and Mogyorodi, 2024)","Acceptance Testing (IEEE, 2022, p. 22; Hamburg and Mogyorodi, 2024; LambdaTest, 2024), Non-functional Testing (LambdaTest, 2024), Reliability Testing (likely incorrectly) (Bourque and Fairley, 2014, p. 4-6)","""Operational testing"" and ""operational acceptance testing"" are treated as synonyms in this glossary. Production Acceptance Testing (Hamburg and Mogyorodi, 2024)","Ensured by the use of TDD and ATDD (Washizaki, 2024, p. 6-9)"
Outsourced Testing,Practice?,"""Testing performed by people who are not co-located with the project team and are not fellow employees"" (Hamburg and Mogyorodi, 2024)",,,
Pair Testing,"Technique (Washizaki, 2024, p. 5-14)","Testing ""in which two team members simultaneously collaborate"" (Hamburg and Mogyorodi, 2024); can be structured so that ""one generates and runs the test cases[ and] the other observes and analyzes the testing process"" (Washizaki, 2024, p. 5-14)","Ad Hoc Testing (Washizaki, 2024, p. 5-14)",,"""Allows [for] generating test cases with broad and better test coverage"" (Washizaki, 2024, p. 5-14). Related to buddy testing?"
Pairwise Integration Testing,Level (inferred from integration testing),"""Integration testing that targets pairs of components that work together as shown in a call graph"" (Hamburg and Mogyorodi, 2024)","Integration Testing (Hamburg and Mogyorodi, 2024)",,
Pairwise Testing,"Technique (IEEE, 2022, pp. 7, 22; Washizaki, 2024, p. 5-11; Hamburg and Mogyorodi, 2024)","Testing ""in which test cases are designed to execute all possible discrete combinations of each pair of input parameters"" (IEEE, 2022, p. 7) or ""parameter-value pairs"" (Hamburg and Mogyorodi, 2024)","Combinatorial Testing (IEEE, 2022, pp. 7, 22; Washizaki, 2024, p. 5-11), Specification-Based Testing (IEEE, 2022, p. 7; Hamburg and Mogyorodi, 2024)","Orthogonal Array Testing (OAT) (Washizaki, 2024, p. 5-11), although this seems disputed by other sources",See ISO 29119-4
Path Testing,"Technique (Washizaki, 2024, p. 5-13)","Testing that ""aims to execute all entry-to-exit control flow paths in a SUT’s control flow graph"" (Washizaki, 2024, p. 5-13)","Control Flow Testing (Washizaki, 2024, p. 5-13; implied by Hamburg and Mogyorodi, 2024)","All-Paths Testing? (van Vliet, 2000, p. 421)","""Exhaustive path testing is generally not feasible because of loops"" (Washizaki, 2024, p. 5-13), the exponential increase of possible paths with more branches (van Vliet, 2000, p. 421), and the ""significant problem"" of infeasible paths (Washizaki, 2024, p. 5-5). The number of test cases should be at least ""the number of linearly independent paths through a program's source code"" (Washizaki, 2024, p. 4-2). Possibly involves ""path analysis"""
Peer Reviews,Approach,"""Review[s] of work products performed by peers [with similar abilities (Hamburg and Mogyorodi, 2024)] during development of the work products to identify defects for removal"" (Washizaki, 2024, p. 12-13; OG [14], might be IEEE, 2017, p. 317?)","Reviews (IEEE, 2017, p. 317; Washizaki, 2024, p. 12-13; Hamburg and Mogyorodi, 2024), Static Analysis? (Washizaki, 2024, p. 12-13)",,"""Often performed during development of the work products to identify defects for removal"", ""increase the quality of the work product"", and ""reduce cost by fixing defects as soon as possible"" (IEEE, 2017, p. 317). Potentially a byproduct of pair programming (or else there is another type of ""Pair Reviews"") (Washizaki, 2024, p. 12-14). See ISO 20246"
Penetration Testing,"Type (inferred from security testing), Technique (Hamburg and Mogyorodi, 2024)","Testing that ""tests a system in its final production environment"" (Washizaki, 2024, p. 13-5) by ""exploit[ing] security vulnerabilities (known or unknown) to gain unauthorized access"" (Hamburg and Mogyorodi, 2024), such as ""submit[ting] malformed, malicious and random data to [its] entry points"" (Washizaki, 2024, p. 13-5)","Security Testing (Washizaki, 2024, p. 13-4; implied by Hamburg and Mogyorodi, 2024), Online Testing?, Operational Testing?","Ethical Hacking Testing (Washizaki, 2024, p. 13-4)","Should be conducted by security experts (Washizaki, 2024, p. 13-5). Related to fuzz testing? (Washizaki, 2024, p. 13-5)"
Performance Efficiency Testing,Type? (inferred from performance-related testing),"Testing to evaluate the ""capability of a product to perform its functions within specified time and throughput parameters and be efficient in the use of resources under specified conditions"" (ISO/IEC, 2023a; similar but less specific in IEEE, 2017, p. 319)","Performance-related Testing?, Performance Testing (implied by IEEE, 2017, p. 319), Reliability Testing (and potentially Dependability Testing) (ISO/IEC, 2023a)",,"Resources can include devices, configurations, energy, or materials (ISO/IEC, 2023a). Related to the idea of ""performance deficiency"" (IEEE, 2017, p. 319)"
Performance Testing,"Type (IEEE, 2022, pp. 7, 22, 26-27)","Testing ""conducted to evaluate the degree to which a test item accomplishes its designated functions within given constraints of time and other resources"" (IEEE, 2022, p. 7; 2017, p. 320) or within ""specified performance requirements"" (Washizaki, 2024, p. 5-9), or to determine the performance efficiency of a component or system (Hamburg and Mogyorodi, 2024)","Non-functional Testing (Washizaki, 2024, p. 5-8); Performance-related Testing (IEEE, 2022, p. 22)",,"Difference between this, performance efficiency testing, and performance-related testing? May be specific to ""real-time constraints"" (IEEE, 2022, p. 43). May be done by ""us[ing] infrastructure/operations services"" early on in the development process (Washizaki, 2024, p. 6-5)"
Performance-related Testing,"Type (IEEE, 2022, p. 22)",,,,Difference between this and performance testing?
Physical Configuration Audits (PCAs),Practice? (inferred from audits),"""Audit[s] conducted to verify that a configuration item, as built, conforms to the technical documentation that defines it"" (IEEE, 2017, p. 322)","Audits (IEEE, 2017, p. 250)",,
Player Perspective Testing,Level?,"""Testing done by testers from a player's perspective to validate player satisfaction"" (Hamburg and Mogyorodi, 2024)","Satisfaction Testing (if it exists) (Hamburg and Mogyorodi, 2024)",,
Playtesting,Level?,"""Testing of a game [performed] by players to identify failures and gather feedback"" (Hamburg and Mogyorodi, 2024)","Ad Hoc Testing (Hamburg and Mogyorodi, 2024)",,
Portability Testing,"Type (IEEE, 2022, pp. 7, 22; implied by its quality)","Testing to evaluate the ""capability of a product to be adapted to changes in its requirements, contexts of use, or system environment"" (ISO/IEC, 2023a; similar in IEEE, 2022, p. 7; 2017, pp. 184, 329; and Hamburg and Mogyorodi, 2024)",,"Flexibility Testing (ISO/IEC, 2023a); Transportability Testing (implied by IEEE, 2017, p. 329)","Related to co-existence and installability testing, as well as adaptability and replaceability testing (if they exist) (Hamburg and Mogyorodi, 2024) and potentially compatibility testing, and can improve user assistance and interaction capability (ISO/IEC, 2023a) ""Can be measured either as the extent to which a product can be used by additional types of users to achieve additional types of goals … or by a capability to be modified to support adaptation for new types of users"", etc. (ISO/IEC, 2011)"
Post-Release Testing,"Type (Hamburg and Mogyorodi, 2024)","""Testing to ensure that the release is performed correctly and the application can be deployed"" (Hamburg and Mogyorodi, 2024)","Online Testing?, Operational Testing?",,
Power Testing?,Approach,"Testing ""based on power consumption and battery failure"" (IEEE, 2022, p. 43); term is original",Performance-related Testing,,
Prioritization Testing,Practice?,"Testing that ""schedule[s] test cases to increase the rate [and likelihood] of fault detection, … the coverage of code under test, and … reliability"" (Washizaki, 2024, p. 5-8)",,,"What does ""schedule"" mean in this context?"
Privacy Testing,Approach,"Testing that ""assess[es] the security and privacy of users’ personal data to prevent local attacks"" (Washizaki, 2024, p. 5-10)",,,"Assesses policies and profile/data management (Washizaki, 2024, p. 5-10); seems to overlap with IEEE's definition of security testing"
Procedure Testing,"Type (IEEE, 2022, pp. 7, 22; 2017, p. 337; OG IEEE, 2013)","Testing ""conducted to evaluate whether procedural instructions for interacting with a test item or using its outputs meet user requirements and support the purpose of their use"" (IEEE, 2022, p. 7; 2017, p. 337; OG IEEE, 2013)","Functional Suitability Testing (IEEE, 2022, p. 7; 2017, p. 337; OG IEEE, 2013)",,
Process-Driven Scripting,"Technique (Hamburg and Mogyorodi, 2024)","Testing ""where scripts are structured into scenarios which represent use cases of the software under test"" and ""can be parameterized with test data"" (Hamburg and Mogyorodi, 2024)","Scripted Testing, Scenario Testing (Hamburg and Mogyorodi, 2024)",,
Production Verification Testing,"Level (IEEE, 2022, p. 22)",,"Acceptance Testing (IEEE, 2022, p. 22), Online Testing?, Operational Testing?",,
Qualification Testing,Level?,"""Testing … to demonstrate that a software product meets its specifications and is ready for use in its target environment or integration with its containing system"" (IEEE, 2017, p. 360; OG ISO/IEC, 2008)",,Operational (Acceptance) Testing?,"""Conducted by the developer and witnessed by the acquirer (as appropriate)"" (IEEE, 2017, p. 360)"
Quick Testing,"Technique (Washizaki, 2024, p. 5-14)","Testing ""in which a very small test suite is selected and executed"" (Washizaki, 2024, p. 5-14)","Ad Hoc Testing (Washizaki, 2024, p. 5-14)",,"""Guarantees that no failure can be experienced because of SUT components that are not fully operational"" (Washizaki, 2024, p. 5-14), but this is not elaborated on"
Random Testing,"Technique (IEEE, 2022, pp. 7, 22, 36; Washizaki, 2024, p. 5-12; Hamburg and Mogyorodi, 2024), Practice? (inferred from mathematical-based testing)","Testing ""based on generating test cases to exercise randomly selected test item inputs"" (IEEE, 2022, p. 7) which can be ""generated based on an operational profile"" (Hamburg and Mogyorodi, 2024)","Specification-based Testing (IEEE, 2022, pp. 7, 22; Washizaki, 2024, p. 5-12; Hamburg and Mogyorodi, 2024), Usage-based Testing (Washizaki, 2024, p. 5-15; implied by use operational profile by Hamburg and Mogyorodi, 2024), Mathematical-based Testing (IEEE, 2022, p. 36)",,"Often used in automated testing (Washizaki, 2024, p. 5-12) and reliability testing (van Vliet, 2000, p. 439). Implied to be related to statistical testing (Washizaki, 2024, p. 5-15)"
Reactive Testing,Practice?,"""Testing that dynamically responds to the behavior of the test object and to test results being obtained"" (Hamburg and Mogyorodi, 2024)","Dynamic Testing (implied by Hamburg and Mogyorodi, 2024)",,"What does ""responds"" mean in this context?"
Recovery Testing,"Type (IEEE, 2022, p. 22)",,"Performance-related Testing (IEEE, 2022, p. 22)",,Difference between this and disaster/recovery testing?
Recovery Testing,Approach,"Testing of ""software restart capabilities after a system crash or other disaster"" (Washizaki, 2024, p. 5-9) that ensures it is ""restor[ed] … to a state in which it can perform required functions"" (IEEE, 2017, p. 370)","Non-functional Testing (Washizaki, 2024, p. 5-9), Usability Testing? (Washizaki, 2024, p. 5-10)",,"May be done through simulations (Washizaki, 2024, p. 5-28). Difference between this and disaster/recovery testing?"
Regression Testing,"Approach, Level? (Barbosa et al., 2006, p. 3)","The ""selective retesting of a system or component to verify that modifications [to a test item or to its operational environment (IEEE, 2022, p. 8)] have not caused unintended effects"", specifically in the areas of ""functionality, reliability [and] performance"", and have ""not introduced additional defects"" (IEEE, 2017, p. 372), primarily ""in unmodified parts of the test item"" (IEEE, 2022, p. 8; similar in Hamburg and Mogyorodi, 2024)","Functional Testing, Non-functional Testing, Continuous Testing (Washizaki, 2024, p. 5-8), Change-Related Testing (Hamburg and Mogyorodi, 2024)","Non-regression Testing (Washizaki, 2024, p. 5-8)","""Does not test that the modification works correctly""; this is ""retesting"" (IEEE, 2022, p. 8; also described as separate in Washizaki, 2024, p. 6-5). Interesting to note it is sometimes described as such (Washizaki, 2024, pp. 7-5 to 7-6; IEEE, 2017, p. 372), maybe just in the sense of ""testing again""? Should be part of any test strategy and its level should be ""based on a knowledge of the risks associated with developers making changes"" (IEEE, 2022, p. 23), although it can be applied to any level (Washizaki, 2024, p. 5-8), and ""play[s] an important role in software engineering operations"" (Washizaki, 2024, p. 6-5) and ""maintenance"" (Washizaki, 2024, p. 7-5). Can be supported by tools, such as ""tinderboxes"" (IEEE, 2017, p. 478)"
Regulatory Acceptance Testing,Level (inferred from acceptance testing),"""Testing performed to determine the compliance of the test object"" (Hamburg and Mogyorodi, 2024)","Acceptance Testing (Hamburg and Mogyorodi, 2024)",,Difference between this and acceptance testing?
Reliability Testing,"Type (IEEE, 2022, pp. 8, 22; 2017, p. 375; implied by its quality)","Testing that evaluates the ""capability of a product to perform specified functions under specified conditions for a specified period of time without interruptions and failures"" (ISO/IEC, 2023a); can be mesaured as ""the frequency with which failures occur"" (IEEE, 2022, p. 8; 2013, p. 5) or the ""probability that software will not cause the failure of a system"" (IEEE, 2017, p. 425)","Non-functional Testing (Washizaki, 2024, p. 5-9), Security Testing (implied by IEEE, 2017, p. 404)","Potentially Dependability Testing, although this has a wider scope (ISO/IEC, 2023a)","Often uses statistical models of user behaviour, reliability growth models (Washizaki, 2024, p. 5-9), and/or random testing (van Vliet, 2000, p. 439) and may be facilitated by DevOps (Washizaki, 2024, p. 5-9) such as ""infrastructure/operations services"", which can be done early on in the development process (Washizaki, 2024, p. 6-5). Can be done using ""the test-retest method, the alternative form method, the split-halves method and the internal consistency method"" (verify this applies to software) (Washizaki, 2024, p. 18-14)"
Requirements-based Testing,"Technique (IEEE, 2022, pp. 8, 22), Approach (Hamburg and Mogyorodi, 2024)","Testing ""based on exercising atomic requirements"" (IEEE, 2022, p. 8)","Specification-based Testing (IEEE, 2022, pp. 8, 22), Risk-based Testing (IEEE, 2022, p. 20)","Software Quality Evaluations? (IEEE, 2017, p. 425; OG ISO/IEC, 2014)","May involve ""requirements analysis"""
Response-Time Testing,Approach,"Testing that evaluates the ""capability of a product to perform its specified function under specified conditions so that the response time … meet[s] the requirements"" (ISO/IEC, 2023a)","Performance Testing (Washizaki, 2024, p. 5-9); Performance-related Testing (IEEE, 2022, p. 22); Time Behaviour Testing? (ISO/IEC, 2023a)",,"Good to use if the software may have ""a large number of concurrent users"" (IEEE, 2022, p. 45)"
"Retesting (or ""Re-testing"" (Hamburg and Mogyorodi, 2024))",Approach,"""Testing performed to check that modifications made to correct a fault have successfully removed the fault"" (IEEE, 2022, p. 8; similar in 2017, p. 386 and Hamburg and Mogyorodi, 2024)","Change-Related Testing (Hamburg and Mogyorodi, 2024)","Confirmation Testing (IEEE, 2022, p. 8; 2017, p. 386; used by Hamburg and Mogyorodi, 2024)","Should be part of any test strategy and its level should be ""based on a knowledge of the risks associated with developers making changes"" (IEEE, 2022, p. 23) and ""play[s] an important role in software  engineering operations"" (Washizaki, 2024, p. 6-5). ""In most cases, the original test cases associated with the fixed code are used for retesting [as prescribed by IEEE (2017, p. 386)], but they are sometimes supplemented by new test cases that provide improved coverage"" (IEEE, 2022, p. 35)"
Reviews,Approach,"""Process[es] or meeting[s] during which a software product is presented to project personnel, managers, users, customers, user representatives, or other interested parties for comment or approval"" (IEEE, 2017, p. 388) ""to detect defects or to provide improvements"" (Hamburg and Mogyorodi, 2024)","Static Testing (IEEE, 2022, pp. 9, 17, 25, 28; Hamburg and Mogyorodi, 2024), Static Analysis? (Washizaki, 2024, p. 12-13)",,"""Can identify issues early in development or even before a component is designed"" (Washizaki, 2024, p. 12-13). See also ISO/IEC 20246"
Risk-based Testing,"Approach, Technique? (IEEE, 2022, p. 18)","Testing ""in which the management, selection, prioritization, and use of testing activities and resources are consciously based on corresponding types and levels of analysed risk"" (IEEE, 2022, p. 8; 2017, p. 394; OG 2013)","Dynamic Testing? (IEEE, 2022, p. 18)",,"Recommended technique for ""choosing the subset of possible tests that are most likely to uncover issues of interest"" (IEEE, 2022, p. 18). May involve ""risk analysis"". See the ISO/IEC 25000 SQuaRE family of standards"
Robustness Testing,Approach,"Testing the ""degree to which a system or component can function correctly in the presence of invalid inputs or stressful environmental conditions"" (IEEE, 2017, p. 394)","Boundary-Value Analysis (Washizaki, 2024, p. 5-11)","Fault Tolerance Testing (implied by Hamburg and Mogyorodi, 2024)","Related to error/fault tolerance (IEEE, 2017, p. 394) and potentially stress testing?"
Role-based Reviews,Approach,"Reviews ""in which a work product is evaluated from the perspective of different stakeholders"" (Hamburg and Mogyorodi, 2024)","Reviews (Hamburg and Mogyorodi, 2024), Scenario Testing?",,
Safety Demonstrations,Artifact,"""Bod[ies] of evidence and rationale that show[] an item is justified as being safe within allowed limits on risk"" (IEEE, 2017, p. 397; OG ISO/IEC, 2011)",,,
Sandwich Testing,Level (inferred from integration testing),,"Integration Testing (Washizaki, 2024, p. 5-7)","Mixed Testing (Washizaki, 2024, p. 5-7)",
Scalability Testing,"Type (implied by its quality (ISO/IEC, 2023a))","Testing the ""capability of a product to handle growing or shrinking workloads or to adapt its capacity to handle variability"" (ISO/IEC, 2023a)","Portability Testing (ISO/IEC, 2023a); Non-functional Testing (Washizaki, 2024, p. 5-8)",,"""Particularly important in distributed or high-performance systems"" (Washizaki, 2024, p. 5-9) and may be done by ""us[ing] infrastructure/operations services"" early on in the development process (Washizaki, 2024, p. 6-5). Washizaki seems to define it as usability testing (2024, p. 5-9), despite correctly defining ""scalability"" (2024, p. 5-5). Related to elasticity testing?"
Scenario Testing,"Technique (Washizaki, 2024, p. 5-12; IEEE, 2022, pp. 9, 22; 2017, p. 400; OG 2013)","Testing ""based on exercising sequences of interactions between the test item and other systems,"" including users (IEEE, 2022, p. 9), that is ""the SUT’s behavioral aspects"" (Washizaki, 2024, p. 5-12)","Specification-based Testing (Washizaki, 2024, p. 5-12; IEEE, 2022, pp. 9, 22), Model-based Testing (implied by Bourque and Fairley, 2014, p. 4-10)",,"""Often used with test automation harnesses"" (Washizaki, 2024, p. 5-12)"
Scripted Testing,"Practice (IEEE, 2022, pp. 20, 22)","""Testing performed based on a documented test script"" (IEEE, 2022, p. 9; 2017, p. 403; OG 2013) or ""written instructions in a test case"" (IEEE, 2017, p. 403; OG 2013)","Dynamic Testing (IEEE, 2017, p. 403; OG 2013), Manual Testing (usually) (IEEE, 2022, pp. 9, 33; 2017, p. 403), Automatic Testing (""typically requires more detail"") (IEEE, 2022, p. 33)",,"""Helps achieve required test coverage levels"" (IEEE, 2022, p. 33)"
Security Testing,"Type (IEEE, 2022, pp. 9, 22, 26-27; 2017, p. 405; OG 2013; implied by its quality)","Testing that evaluates the ""capability of a product to protect information and data [including data in transmission (ISO/IEC, 2023a)] so that persons or other products have the degree of data access appropriate to their types and levels of authorization, and to defend against attack patterns by malicious actors"" (ISO/IEC, 2023a; similar in IEEE, 2022, p. 9; Washizaki, 2024, pp. 5-9, 13-14)","Reliability Testing (and potentially Dependability Testing) (ISO/IEC, 2023a)",,"Verifies ""confidentiality, integrity, and availability"" and usually includes negative testing (Washizaki, 2024, p. 5-9). Good to use when the software will be widely available (IEEE, 2022, p. 45)"
Similarity-based Prioritization Testing,Practice?,"Testing that prioritizes test cases ""starting from those most dissimilar according to a predefined distance function"" (Washizaki, 2024, p. 5-8)","Prioritization Testing (Washizaki, 2024, p. 5-8)",,
Single-Hit Decision Table,Technique (inferred from decision table testing),"Testing ""based on exercising decision rules"" (IEEE, 2022, p. 4) in a single-hit decision table (IEEE, 2017, p. 415; OG ISO, 1984)","Decision Table Testing (IEEE, 2017, p. 175; OG ISO, 1984)",,
Smoke Testing,"Technique (Washizaki, 2024, p. 5-14)","Testing that ""ensures that the SUT's core functionalities behave properly"" and ""the SUT is operational before the planned testing begins"" (Washizaki, 2024, p. 5-14)","Ad Hoc Testing, Quick Testing (Washizaki, 2024, p. 5-14), Unscripted Testing (implied by Washizaki, 2024, p. 5-14), Offline Testing?","Build Verification Testing (Washizaki, 2024, p. 5-14)","""Prevents failures because of the test environment"" (Washizaki, 2024, p. 5-14). Seems to be implied to be the responsibility of DevOps (Washizaki, 2024, p. 6-9)"
Software Design Audits,Practice? (inferred from audits),"""Review[s] of … software product[s] to determine compliance with requirements, standards, and contractual documents"" (IEEE, 2017, p. 420)","Audits, Reviews (IEEE, 2017, p. 420)",,"Is this specific to the software's design, or to the software itself?"
Specification-based Testing,"Technique (Washizaki, 2024, p. 5-10; IEEE, 2022, p. 22; Souza et al., 2017, p. 3; implied by IEEE, 2022, pp. 2-4, 6-9 and Hamburg and Mogyorodi, 2024)","""Testing in which the principal test basis is the external inputs and outputs of the test item"" (IEEE, 2022, p. 9; 2017, p. 431) or its specification (Hamburg and Mogyorodi, 2024) that ""select[s] a few test cases from the input domain that can detect specific categories of faults"" (Washizaki, 2024, pp. 5-10 to 5-11)","Dynamic Testing (IEEE, 2022, p. 17)","Black-Box Testing (Washizaki, 2024, p. 5-10; IEEE, 2022, p. 9; Hamburg and Mogyorodi, 2024; IEEE, 2017, p. 431; van Vliet, 2000, p. 399), Domain Testing (Washizaki, 2024, p. 5-10), Closed-Box Testing (IEEE, 2022, p. 9; 2017, p. 431), Input Domain-Based Testing (implied by Bourque and Fairley, 2014, p. 4-8), Functional Testing (van Vliet, 2000, p. 399; implied by IEEE, 2017, p. 431)","Should be done before structure-based testing to avoid bias towards ""test cases based on how the module works"" (Patton, 2006, p. 113). Difference between this and functional testing (van Vliet, 2000, p. 399; IEEE, 2017, p. 431; Souza et al., 2017, p. 3)?"
State Transition Testing,"Technique (Washizaki, 2024, p. 5-12; IEEE, 2022, pp. 9, 22)","Testing ""derived to cover the states and transitions"" (Washizaki, 2024, p. 5-12), defined as ""change[s] from one state to another … or the same state"" (IEEE, 2017, p. 484; OG ISO/IEC, 1995), ""in a state model"" (IEEE, 2022, p. 9)","Specification-based Testing (Washizaki, 2024, p. 5-12; IEEE, 2022, pp. 9, 22), Model-based Testing (Bourque and Fairley, 2014, p. 4-10)",,"Could be facilitated by a state diagram (IEEE, 2017, p. 438). Washizaki implies the SUT is represented by a finite-state machine (2024, p. 5-12). See also Patton, 2006, pp. 79-87"
Statement Testing,"Technique (Washizaki, 2024, p. 5-13; IEEE, 2022, pp. 9, 22; IEEE, 2017, p. 438)","Testing ""based on exercising executable statements"" (IEEE, 2022, p. 9) by ""forc[ing the] execution of individual statements in a test item"" (IEEE, 2017, p. 439; OG IEEE, 2013)","Control Flow Testing (Washizaki, 2024, p. 5-13), Structure-based Testing (IEEE, 2022, p. 22)","All-Nodes Testing (van Vliet, 2000, p. 421)",
Static Analysis,Approach,"The ""process of evaluating a system or component based on its form, structure, content, or documentation"" (IEEE, 2017, p. 439) that ""involves the use of tools to detect anomalies in code or documents without execution"" (IEEE, 2022, p. 18)","Static Testing (IEEE, 2022, pp. 9, 17, 25, 28)",,See also ISO/IEC 20246
Static Testing,Approach,"""Testing in which a test item is examined against a set of quality or other criteria without the test item being executed"" (IEEE, 2022, p. 9; 2017, p. 440; OG 2013)",,,"""Helps form an optimal test strategy"" (IEEE, 2022, p. 21), ""can be performed anywhere in the life cycle"" (IEEE, 2022, p. 17), including ""prior to dynamic testing[,] and can find defects before test execution becomes possible"" (IEEE, 2022, p. 21). Not always considered ""testing"" (Washizaki, 2024, p. 5-2). See also ISO/IEC 20246"
Statistical Testing,Approach,,"Usage-based Testing (Washizaki, 2024, p. 5-15)",,"""Often provide[s] a snapshot of the more troublesome areas of the software product under examination"" (Washizaki, 2024, p. 12-8). ""Usage-based statistical testing is applied more during the acceptance testing stage"" (Washizaki, 2024, p. 5-15); how to track this? Implied to be related to random testing (Washizaki, 2024, p. 5-15)"
Stress Testing,"Type (IEEE, 2022, pp. 9, 22; 2017, p. 442)","Testing of ""the SUT beyond its capabilities [done] by generating a load greater than what the system is expected to handle"" (Washizaki, 2024, p. 5-9) or providing insufficient resource availability (IEEE, 2022, p. 9; 2017, p. 442; OG 2013)","Non-functional Testing (Washizaki, 2024, p. 5-9), Performance Testing (IEEE, 2022, p. 9), Performance-related Testing (IEEE, 2022, p. 22), Performance Efficiency Testing (IEEE, 2017, p. 442), Boundary Condition Testing (Patton, 2006, p. 86; implied by IEEE, 2017, p. 442)",,
Structure-based Testing,"Technique (Washizaki, 2024, pp. 5-10, 5-13; implied by IEEE, 2022, pp. 2, 4, 6, 9)","Testing ""derived from an examination of the structure[, internal contents or implementation (IEEE, 2017, p. 199)] of the test item"" (IEEE, 2022, p. 9)","Dynamic Testing (Washizaki, 2024, p. 5-13; IEEE, 2022, pp. 9, 17; 2017, p. 444), Static Testing (Washizaki, 2024, p. 5-13)","White-Box Testing (Washizaki, 2024, p. 5-10; IEEE, 2022, p. 9; Hamburg and Mogyorodi, 2024; IEEE, 2017, pp. 443-444; Patton, 2006, p. 55), Glass-Box Testing (Washizaki, 2024, p. 5-10; IEEE, 2022, p. 9; Hamburg and Mogyorodi, 2024; IEEE, 2017, pp. 443-444; Peters and Pedrycz, 2000, p. 439), Code-based Testing (Washizaki, 2024, p. 5-13; implied by Bourque and Fairley, 2014, p. 4-8), Structural Testing (IEEE, 2022, p. 9; Hamburg and Mogyorodi, 2024; IEEE, 2017, pp. 443-444), Clear-Box Testing (Washizaki, 2024, p. 5-10; Hamburg and Mogyorodi, 2024; Patton, 2006, p. 55)","""Can be performed at different levels (such as code development, code inspection, or unit testing)"" (Washizaki, 2024, p. 5-13). Hamburg and Mogyorodi (2024) has more synonyms; it seems like ""structure-based testing"" is specific to dynamic testing (IEEE, 2017, p. 444) but ""structural testing"" isn't (p. 443)"
Structured Walkthroughs,Practice?,"""Systematic examination[s] of the requirements, design, or implementation of a system, or any part of it, by qualified personnel"" (IEEE, 2017, p. 444; OG ISO/IEC, 2015)","Walkthroughs, Static Testing",,
Symbolic Execution,"Technique (IEEE, 2017, p. 451)","Testing ""in which program execution is simulated using symbols … and program outputs are expressed as logical or mathematical expressions involving these symbols"" (IEEE, 2017, p. 451)","Static Testing, Static Analysis?, Correctness Testing?",,
Syntax Testing,"Technique (Washizaki, 2024, p. 5-11; IEEE, 2022, p. 22)","Testing based on ""the SUT specifications in a formal language"" (Washizaki, 2024, p. 5-11)","Specification-based Testing (Washizaki, 2024, p. 5-11; IEEE, 2022, p. 22), Functional Testing? (Washizaki, 2024, p. 5-11), Static Testing? (Washizaki, 2024, p. 1-10), Model-based Testing (implied by Bourque and Fairley, 2014, p. 4-10)","Formal Specification-Based Testing (Washizaki, 2024, p. 5-11)","""Permits automatic derivation of functional test cases[,] … provides an oracle for checking test results"" (Washizaki, 2024, p. 5-11), and ""permit[s] desired properties of the specified software to be proved"" (Washizaki, 2024, p. 1-10). Test cases can be generated from these formal requirements (e.g., BDD scenarios and state models), but ""determining an expected result is not always possible"" and may require ""additional business domain expertise"" (Washizaki, 2024, p. 1-20). See also (Peters and Pedrycz, 2000, pp. 448-449; Intana et al., 2020, p. 260)"
System Integration Testing,"Level (IEEE, 2022, pp. 12, 22)","Testing the ""progressive assembling of system components into the whole system"" (IEEE, 2017, p. 454; OG ISO/IEC, 2015)",,,Difference between this and integration testing?
System Testing,"Level (IEEE, 2022, pp. 12, 20-22, 26-27; 2017, p. 467; Washizaki, 2024, p. 5-7)","""Testing conducted on a complete, integrated system to evaluate [its] compliance with its specified requirements"" (IEEE, 2017, p. 456; OG 2012), usually in regards to ""non-functional system requirements"", and verify its behaviour (Washizaki, 2024, p. 5-7).",,,"A system is ""an interacting combination of elements to accomplish a defined objective"" that includes ""hardware, software, firmware, people, information, techniques, facilities, services, and other support elements"" (Washizaki, 2024, p. 1-5; OG INCOSE). Only the software component is in scope of this research; this is done in some cases where ""the software is itself the system of interest, and hardware and support system are regarded as the platform or infrastructure"" (Washizaki, 2024, p. 1-5)"
Systems Integration Testing,Level?,"""Testing conducted on multiple complete, integrated systems to evaluate their ability to communicate successfully with each other and to meet the overall integrated systems' specified requirements"" (IEEE, 2017, p. 457)",,,
"Technical Reviews (Washizaki, 2024, p. 12-14)",Approach,"The ""systematic evaluation of a software product by a team of qualified personnel that examines the suitability of the software product for its intended use and identifies discrepancies from specifications and standards"" (IEEE, 2017, p. 463; OG IEEE, 2008), often done ""at logical transition points in a system life cycle"" (IEEE, 2017, p. 463; OG IEEE, 2014)",Reviews,,"""Can … be more focused and address a specific project phase"" (Washizaki, 2024, p. 12-14; OG [24]). More types given by Washizaki (2024, p. 12-14)"
"Technical Testing? (implied by ""technical requirements""; IEEE, 2017, p. 463)",Approach,"Testing ""requirements relating to the technology and environment, for the development, maintenance, support and execution of the software"" (IEEE, 2017, p. 463)",Non-functional Testing?,,"Includes the ""programming language, testing tools, operating systems, database technology and user interface technologies"" (IEEE, 2017, p. 463)"
Top-Down Testing,Level (inferred from integration testing),"Integration testing (Washizaki, 2024, p. 5-7) that ""starts with the highest‐level component[s] … and proceeds through progressively lower‐levels"" (IEEE, 2017, p. 479)","Integration Testing (Washizaki, 2024, p. 5-7)",,
Tours,"Practice (IEEE, 2022, p. 34)","Testing that is quite general and ""guides testers through the paths of an application like a tour guide leads a tourist through the landmarks of a big city"" (IEEE, 2022, p. 34)","Exploratory Testing, Experience-based Testing (IEEE, 2022, p. 34)",,
t-Wise Testing,"Technique (Washizaki, 2024, p. 5-11)","Testing that ""considers every possible combination of [some] t input"" (Washizaki, 2024, p. 5-11)","All Combinations Testing (Washizaki, 2024, p. 5-11)",,"""More than one pair is derived (i.e., by including higher-level combinations)"" (Washizaki, 2024, p. 5-11)"
Unit Testing,"Level (IEEE, 2022, pp. 12, 20-22, 26-27; 2017, p. 467; Washizaki, 2024, p. 5-6; Hamburg and Mogyorodi, 2024)","""Testing of individual hardware or software components"" (IEEE, 2012, p. 8; similar in Hamburg and Mogyorodi, 2024) or of ""individual routines and modules"" (IEEE, 2017, p. 490)","Construction Testing (Washizaki, 2024, p. 4-7), Automated Testing (often) (Washizaki, 2024, p. 4-14)","Component Testing (IEEE, 2022, pp. 12-13; Hamburg and Mogyorodi, 2024; Peters and Pedrycz, 2000, p. 444), Module Testing (Hamburg and Mogyorodi, 2024; Patton, 2006, p. 109)","""The terms module, component, and unit [sic] are often used interchangeably or defined to be subelements of one another in different ways depending upon the context"" with no standardized relationship (IEEE, 2017, p. 82) but a distinction is sometimes made; for example, ""components differ from classical modules for being re-used in different contexts independently of their development"" (Baresi and Pezzè, 2006, p. 107). See also Engström and Petersen, 2015"
Unscripted Testing,Approach,"""Testing in which the tester's actions are not prescribed by written instructions in a test case"" (IEEE, 2022, p. 15; 2017, p. 490; OG IEEE, 2013)","Dynamic Testing (IEEE, 2022, p. 15; 2017, p. 490)",,
Usability Testing,"Type (IEEE, 2022, pp. 22, 26-27; implied by its type)","Testing that ""evaluate[s] how easy it is for ['specified users' to use and (IEEE, 2017, p. 492; OG ISO/IEC, 2013)] learn to use the software"" by testing functionality (Washizaki, 2024, p. 5-10, IEEE, 2017, p. 493), documentation, and/or recovery (Washizaki, 2024, p. 5-10)",,"Interaction Capability Testing (ISO/IEC, 2023a), Fitness-for-Use Testing (IEEE, 2017, p. 493), Human-Computer Interaction Testing? (Washizaki, 2024, p. 5-10)","Related to acceptance testing (van Vliet, 2000, p. 439) and potentially reusability (IEEE, 2017, p. 492), but this relation may just be syntactic 😅"
Usability Walkthroughs,Approach,"""Usability evaluation[s] in which one or more evaluators step through a scenario playing the role of a user and identifying usability problems associated with successful completion of the scenario[s]"" (IEEE, 2017, p. 493; OG ISO/IEC, 2010)","Usability Testing (IEEE, 2017, p. 493), Walkthroughs",,"""Evaluators can include usability specialists, developers, [and/or] end users"" (IEEE, 2017, p. 493)"
Usage-based Testing,"Technique (Washizaki, 2024, p. 5-15)","Testing that ""usually rel[ies] on a usage model or profiles"" in the context of ""the actual operational environment"" and ""usage by the target stakeholder"" (Washizaki, 2024, p. 5-15)",Online Testing?,,"May involve the development/implementation of an ""operational profile"" (Hamburg and Mogyorodi, 2024)"
Use Case Testing,"Technique (IEEE, 2022, p. 22)",,"Specification-based Testing (IEEE, 2022, p. 22)",,
"User Acceptance Testing (UAT (Hamburg and Mogyorodi, 2024))","Level (IEEE, 2022, p. 22; implied by acceptance testing)","""A type of acceptance testing performed to determine if intended users accept the system"" (Hamburg and Mogyorodi, 2024)","Acceptance Testing (IEEE, 2022, p. 22; Hamburg and Mogyorodi, 2024)",,"Also mentioned by Washizaki (2024, p. 6-13)"
User-Based Evaluations,Approach,"""Evaluation[s] that involve[] representative users performing tasks with the system … focused on usability[,] … efficiency, effectiveness, [and/or] user satisfaction"" (IEEE, 2017, p. 498; OG ISO/IEC, 2016)","Usability Testing (IEEE, 2017, p. 498), Acceptance Testing?",,
Validation Testing,Approach,"""Test[ing] to determine whether an implemented system fulfils its specified requirements"" (IEEE, 2017, p. 499; ISO/IEC, 2015)",,,"OG definition was about a specific test, not a test approach"
Verification Testing,Approach,"Testing to determine whether a system fulfils ""its specified requirements at a particular stage of its development"" (IEEE, 2017, p. 504; ISO/IEC, 2015)",,,"This seems to conflate the definition of ""verification"" with ""validation"""
Volume Testing,Approach,"Testing to assess ""the SUT’s internal storage limitations and its ability to exchange data and information"" (Washizaki, 2024, p. 5-9) or ""process specified volumes of data (usually at or near maximum specified capacity)"" (IEEE, 2017, p. 508; OG 2013)","Performance Efficiency Testing (IEEE, 2017, p. 508; OG 2013), Non-functional Testing (Washizaki, 2024, p. 5-9)",,
Walkthroughs,"Technique? (IEEE, 2017, p. 509)","Evaluations ""in which a designer or programmer leads members of the development team and other interested parties through a segment of documentation or code, and the participants ask questions and make comments about possible errors, violation of development standards, and other problems"" (IEEE, 2017, p. 508)","Static Analysis (IEEE, 2017, p. 508)",,"Sometimes spelled with a hyphen (""walk-through""; IEEE, 2017, pp. 133, 439, 508)"
,,,,,
,,,,,See also the ISO/IEC/IEEE 29119 series (especially 29119-4); 29119-2 provides more information on test processes
,,,,,"See also ISO/IEC 2382:2015, Information technology -— Vocabulary"
,,,,,Compare ISO/IEC TR 19759:2016 to SWEBOK
,,,,,"Investigate convertibility/functional size measurement (IEEE, 2017, p. 103)"
